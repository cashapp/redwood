import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.github.gmazzo.buildconfig'
apply plugin: 'com.android.lint'

// This module is included in two projects:
// - In the root project where it's released as one of our artifacts
// - In build-support project where we can use it for the test-app and samples.
//
// We only want to publish when it's being built in the root project.
if (rootProject.name == 'redwood') {
  redwoodBuild {
    publishing()
  }
} else {
  // Move the build directory when included in build-support so as to not poison the real build.
  // If we don't there's a chance incorrect build config values (configured below) will be used.
  layout.buildDirectory = new File(rootDir, "build/redwood-gradle-plugin")
}

tasks.withType(JavaCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_11.toString()
  targetCompatibility = JavaVersion.VERSION_11.toString()
}

tasks.withType(KotlinJvmCompile).configureEach {
  compilerOptions {
    jvmTarget.set(JvmTarget.JVM_11)
  }
}

dependencies {
  compileOnly gradleApi()
  compileOnly libs.kotlin.gradlePlugin
  compileOnly libs.androidGradlePlugin

  testImplementation libs.junit
  testImplementation libs.testParameterInjector
  testImplementation libs.assertk
  testImplementation gradleTestKit()

  lintChecks libs.androidx.gradlePluginLints
}

gradlePlugin {
  plugins {
    redwoodLint {
      id = "app.cash.redwood.lint"
      displayName = "Redwood lint"
      description = "Redwood lint Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodLintPlugin"
    }
    redwoodSchema {
      id = "app.cash.redwood.schema"
      displayName = "Redwood schema"
      description = "Redwood Schema Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodSchemaPlugin"
    }
    redwoodComposeGenerator {
      id = "app.cash.redwood.generator.compose"
      displayName = "Redwood generator (Compose)"
      description = "Redwood schema Compose code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodComposeGeneratorPlugin"
    }
    redwoodComposeProtocolGenerator {
      id = "app.cash.redwood.generator.compose.protocol"
      displayName = "Redwood generator (Compose protocol)"
      description = "Redwood schema Compose protocol code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodComposeProtocolGeneratorPlugin"
    }
    redwoodModifierGeneratorPlugin {
      id = "app.cash.redwood.generator.modifiers"
      displayName = "Redwood generator (layout modifiers)"
      description = "Redwood schema layout modifier code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodModifiersGeneratorPlugin"
    }
    redwoodProtocolGuestGenerator {
      id = "app.cash.redwood.generator.protocol.guest"
      displayName = "Redwood generator (guest protocol)"
      description = "Redwood schema guest protocol code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodProtocolGuestGeneratorPlugin"
    }
    redwoodProtocolHostGenerator {
      id = "app.cash.redwood.generator.protocol.host"
      displayName = "Redwood generator (host protocol)"
      description = "Redwood schema host protocol code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodProtocolHostGeneratorPlugin"
    }
    redwoodTestingGenerator {
      id = "app.cash.redwood.generator.testing"
      displayName = "Redwood generator (testing)"
      description = "Redwood schema testing code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodTestingGeneratorPlugin"
    }
    redwoodWidgetGenerator {
      id = "app.cash.redwood.generator.widget"
      displayName = "Redwood generator (widget)"
      description = "Redwood schema widget code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodWidgetGeneratorPlugin"
    }
    redwoodWidgetProtocolGenerator {
      id = "app.cash.redwood.generator.widget.protocol"
      displayName = "Redwood generator (widget protocol)"
      description = "Redwood schema widget protocol code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodWidgetProtocolGeneratorPlugin"
    }
  }
}

test {
  dependsOn(':redwood-compose:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-gradle-plugin:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-protocol:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-protocol-guest:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-protocol-host:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-runtime:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-schema:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-tooling-codegen:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-tooling-lint:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-tooling-schema:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-widget:publishAllPublicationsToLocalMavenRepository')
  dependsOn(':redwood-widget-compose:publishAllPublicationsToLocalMavenRepository')

  inputs.dir(project.file('src/test/fixture'))
}

buildConfig {
  useKotlinOutput {
    internalVisibility = true
    topLevelConstants = true
  }

  packageName('app.cash.redwood.gradle')
  buildConfigField("String", "redwoodVersion", "\"${project.version}\"")
}
