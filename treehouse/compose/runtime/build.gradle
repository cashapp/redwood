import org.jetbrains.kotlin.gradle.plugin.KotlinPluginKt

apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.

archivesBaseName = 'treehouse-jetpack-compose'

tasks.named("generateMetadataFileForKotlinMultiplatformPublication").configure {
  doLast {
    // Welcome to some horrible code...
    //
    // This module builds the Compose runtime for all our supported platforms including Android.
    // However, someone using Compose UI would use the AndroidX Compose runtime dependency. Since
    // that runtime and runtime exist at different Maven coordinates the build system will include
    // both and D8 will fail with duplicate class errors.
    //
    // To mitigate this, we want to modify our Gradle module metadata (which tells Gradle which
    // artifact to use for each platform) so that the Android variants point at the AndroidX copy.
    // This will ensure that consumers of Treehouse and something like Compose UI in Android builds
    // will use the same Maven coordinates for the runtime and only a single copy will be used.
    //
    // As far as I can tell, there are no APIs comprehensive enough to do this manipulation. For
    // now we do a proper horrible workaround by simply matching the partial JSON text we want to
    // replace and inserting a new partial JSON text with the updated metadata JSON.

    String find = file('module_find.txt').text.replace('{TREEHOUSE_VERSION}', version)
    String replace = file('module_replace.txt').text.replace('{COMPOSE_VERSION}', versions.compose)

    File file = outputFile.get().getAsFile()
    String text = file.text

    int start = text.indexOf(find)
    if (start == -1) {
      throw new RuntimeException("Unable to locate module_find.txt contents in module JSON ($file)")
    }
    int end = start + find.length()

    String newText = text.substring(0, start) + replace + text.substring(end)
    file.text = newText
  }
}

kotlin {
  android {
    publishLibraryVariants('release')
  }
  iosArm32()
  iosArm64()
  iosX64()
  js {
    browser()
  }
  jvm()
  macosX64()
  mingwX64()
  tvosX64()
  tvosArm64()
  watchosArm32()
  watchosArm64()
  macosArm64()
  iosSimulatorArm64()
  watchosSimulatorArm64()
  tvosSimulatorArm64()

  sourceSets {
    commonMain {
      kotlin {
        srcDir '../upstream/compose/runtime/runtime/src/commonMain/kotlin'
      }
      dependencies {
        api deps.kotlinx.coroutines.core
      }
    }
    commonTest {
      kotlin {
        // TODO get tests working on all platforms
        // srcDir '../upstream/compose/runtime/runtime/src/test/kotlin'
      }
      dependencies {
        implementation deps.kotlin.test
      }
    }
    androidMain {
      kotlin {
        srcDir '../upstream/compose/runtime/runtime/src/androidMain/kotlin'
        srcDir '../upstream/compose/runtime/runtime/src/jvmMain/kotlin'
      }
      dependencies {
        // Keep in sync with ../upstream/compose/runtime/runtime/build.gradle
        api 'androidx.annotation:annotation:1.1.0'
      }
    }
    nativeMain {
    }
    nativeTest {
    }
    jvmMain {
      kotlin {
        srcDir '../upstream/compose/runtime/runtime/src/jvmMain/kotlin'
        srcDir '../upstream/compose/runtime/runtime/src/desktopMain/kotlin'
      }
    }
    jvmTest {
      kotlin {
        srcDir '../upstream/compose/runtime/runtime/src/test/kotlin'
      }
      dependencies {
        implementation deps.kotlinx.coroutines.test
      }
    }
  }

  configure([
    targets.iosArm32,
    targets.iosArm64,
    targets.iosX64,
    targets.macosX64,
    targets.mingwX64,
    targets.tvosArm64,
    targets.tvosX64,
    targets.watchosArm32,
    targets.watchosArm64,
    targets.macosArm64(),
    targets.iosSimulatorArm64(),
    targets.watchosSimulatorArm64(),
    targets.tvosSimulatorArm64(),
  ]) {
    compilations.main.source(sourceSets.nativeMain)
    compilations.test.source(sourceSets.nativeTest)
  }
}

android {
  sourceSets {
    main {
      manifest.srcFile '../upstream/compose/runtime/runtime/src/androidMain/AndroidManifest.xml'
    }
  }

  defaultConfig {
    consumerProguardFiles '../upstream/compose/runtime/runtime/proguard-rules.pro'
  }
}

dependencies {
  add(KotlinPluginKt.PLUGIN_CLASSPATH_CONFIGURATION_NAME, deps.androidx.compose.compiler)
  add(KotlinPluginKt.NATIVE_COMPILER_PLUGIN_CLASSPATH_CONFIGURATION_NAME, project(':compose:compiler-hosted'))
}
