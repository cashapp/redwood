import org.jetbrains.kotlin.gradle.plugin.SubpluginOption

buildscript {
  apply from: '../gradle/dependencies.gradle'

  dependencies {
    classpath deps.kotlin.gradlePlugin
    classpath deps.androidGradlePlugin
    classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"
    classpath "app.cash.exhaustive:exhaustive-gradle:${versions.exhaustive}"
    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.4.30'
    classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.8.2'
  }
  repositories {
    mavenCentral()
    google()
    jcenter()
  }
}

apply plugin: 'org.jetbrains.dokka'
dokkaHtmlMultiModule {
  removeChildTasks([
    // Do not include Compose in our documentation site.
    project(":compose:runtime"),
    project(":compose:compiler-hosted"),
  ])
}

allprojects {
  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  tasks.withType(Test).configureEach {
    testLogging {
      if (System.getenv("CI") == "true") {
        events = ["failed", "skipped", "passed"]
      }
      exceptionFormat "full"
    }
  }

  plugins.withId('java-base') {
    java {
      sourceCompatibility = JavaVersion.VERSION_1_8
      targetCompatibility = JavaVersion.VERSION_1_8
    }
  }

  plugins.withId('org.jetbrains.kotlin.jvm') {
    kotlin {
      if (project.path.startsWith(':redwood-')) {
        explicitApi()
      }
    }
  }

  plugins.withId('org.jetbrains.kotlin.multiplatform') {
    kotlin {
      if (project.path.startsWith(':redwood-')) {
        explicitApi()
      }

      sourceSets.all {
        languageSettings {
          useExperimentalAnnotation('kotlin.RequiresOptIn')
        }
      }
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach { task ->
    task.kotlinOptions {
      jvmTarget = '1.8'
      freeCompilerArgs += [
        '-Xopt-in=kotlin.RequiresOptIn',
      ]
    }
  }

  // This is required for JetBrains' Compose fork to build JS correctly.
  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJsCompile).configureEach { task ->
    task.kotlinOptions {
      freeCompilerArgs += [
        "-P", "plugin:androidx.compose.compiler.plugins.kotlin:generateDecoys=true",
      ]
    }
  }

  // Kotlin/Native compiler reports its version like 1.4.21-344 whereas Kotlin/JVM and Kotlin/JS say
  // only 1.4.21. The Compose compiler checks this version and fails for the Kotlin/Native variant.
  tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinNativeCompile).configureEach {
    it.compilerPluginOptions.addPluginArgument(
      'androidx.compose.compiler.plugins.kotlin',
      new SubpluginOption('suppressKotlinVersionCompatibilityCheck', 'true')
    )
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
    def android = plugin.extension
    android.compileSdkVersion 31
    android.compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
    }
    android.defaultConfig {
      minSdkVersion 21
      targetSdkVersion 30
    }
    android.lintOptions {
      checkDependencies true
      checkReleaseBuilds false // Full lint runs as part of 'build' task.
    }
  }

  plugins.withId('com.vanniktech.maven.publish') {
    mavenPublish {
      targets {
        installArchives {
          def url = file("${rootProject.buildDir}/localMaven").toURI().toString()
          releaseRepositoryUrl = url
          snapshotRepositoryUrl = url
        }
      }
    }
  }

  if (!project.path.startsWith(':compose:')) {
    apply plugin: 'com.diffplug.spotless'

    spotless {
      kotlin {
        target("src/*/kotlin/**/*.kt")
        licenseHeaderFile(rootProject.file('../gradle/license-header.txt'))
        // Spotless doesn't read .editorconfig yet: https://github.com/diffplug/spotless/issues/142
        ktlint('0.41.0').userData([
          'insert_final_newline': 'true',
          'end_of_line': 'lf',
          'charset': 'utf-8',
          'indent_size': '2',
        ])
      }
    }
  }
}
