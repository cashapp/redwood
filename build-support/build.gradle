import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

buildscript {
  dependencies {
    classpath libs.kotlin.gradlePlugin
    classpath libs.androidGradlePlugin
    classpath libs.buildConfigPlugin
  }
  repositories {
    mavenCentral()
    gradlePluginPortal()
    google()
  }
}

allprojects {
  repositories {
    mavenCentral()
    google()
  }
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.github.gmazzo.buildconfig'
apply plugin: 'com.android.lint'

dependencies {
  compileOnly gradleApi()
  implementation libs.kotlin.gradlePlugin
  implementation libs.gradleMavenPublishPlugin
  implementation libs.dokkaPlugin
  implementation libs.spotlessPlugin
  implementation libs.androidGradlePlugin
  implementation libs.jetbrains.compose.gradlePlugin
  implementation libs.kotlinx.binaryCompatibilityValidator
  implementation libs.zipline

  // Expose the generated version catalog API to the plugin.
  implementation(files(libs.class.superclass.protectionDomain.codeSource.location))

  lintChecks libs.androidx.gradlePluginLints
}

gradlePlugin {
  plugins {
    redwoodBuild {
      id = "app.cash.redwood.build"
      displayName = "Redwood Build plugin"
      description = "Gradle plugin for Redwood build things"
      implementationClass = "app.cash.redwood.buildsupport.RedwoodBuildPlugin"
    }
  }
}

buildConfig {
  useKotlinOutput {
    internalVisibility = true
    topLevelConstants = true
  }

  packageName('app.cash.redwood.buildsupport')
  buildConfigField("String", "composeCompilerGroupId", "\"${libs.jetbrains.compose.compiler.get().module.group}\"")
  buildConfigField("String", "composeCompilerArtifactId", "\"${libs.jetbrains.compose.compiler.get().module.name}\"")
  buildConfigField("String", "composeCompilerVersion", "\"${libs.jetbrains.compose.compiler.get().version}\"")
}

tasks.withType(JavaCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_11.toString()
  targetCompatibility = JavaVersion.VERSION_11.toString()
}

tasks.withType(KotlinJvmCompile).configureEach {
  compilerOptions {
    jvmTarget.set(JvmTarget.JVM_11)
  }
}
