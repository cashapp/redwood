[app.cash.redwood.treehouse.AppLifecycle]

functions = [
  # fun close(): kotlin.Unit
  "moYx+T3e",

  # fun sendFrame(kotlin.Long): kotlin.Unit
  "5nQA0rL/",

  # fun start(app.cash.redwood.treehouse.AppLifecycle.Host): kotlin.Unit
  "Xd61ecfL",
]

[app.cash.redwood.treehouse.AppLifecycle.Host]

functions = [
  # fun close(): kotlin.Unit
  "moYx+T3e",

  # fun handleUncaughtException(kotlin.Throwable): kotlin.Unit
  "Hls+uhG7",

  # fun onUnknownEvent(app.cash.redwood.protocol.WidgetTag, app.cash.redwood.protocol.EventTag): kotlin.Unit
  "jmKreoSS",

  # fun onUnknownEventNode(app.cash.redwood.protocol.Id, app.cash.redwood.protocol.EventTag): kotlin.Unit
  "fm35ryMh",

  # fun requestFrame(): kotlin.Unit
  "/TkBiP/u",

  # val hostProtocolVersion: app.cash.redwood.protocol.RedwoodVersion
  "4ifoT9Ua",
]

[app.cash.redwood.treehouse.AppService]

functions = [
  # fun close(): kotlin.Unit
  "moYx+T3e",

  # val appLifecycle: app.cash.redwood.treehouse.AppLifecycle
  "odhmO/d6",
]

[app.cash.redwood.treehouse.CancellableService]

functions = [
  # fun cancel(): kotlin.Unit
  "EhTc1FUm",

  # fun close(): kotlin.Unit
  "moYx+T3e",
]

[app.cash.redwood.treehouse.ChangesSinkService]

functions = [
  # fun close(): kotlin.Unit
  "moYx+T3e",

  # fun sendChanges(kotlin.collections.List): kotlin.Unit
  "W8qOuU0t",
]

[app.cash.redwood.treehouse.OnBackPressedCallbackService]

functions = [
  # fun close(): kotlin.Unit
  "moYx+T3e",

  # fun handleOnBackPressed(): kotlin.Unit
  "NjIN59uX",

  # val isEnabled: kotlinx.coroutines.flow.StateFlow<kotlin.Boolean>
  "TAJYS/cz",
]

[app.cash.redwood.treehouse.OnBackPressedDispatcherService]

functions = [
  # fun addCallback(app.cash.redwood.treehouse.OnBackPressedCallbackService): app.cash.redwood.treehouse.CancellableService
  "F7ShXQYg",

  # fun close(): kotlin.Unit
  "moYx+T3e",
]

[app.cash.redwood.treehouse.ZiplineTreehouseUi]

functions = [
  # fun close(): kotlin.Unit
  "moYx+T3e",

  # fun sendEvent(app.cash.redwood.protocol.Event): kotlin.Unit
  "NSFL6TSu",

  # fun snapshotState(): app.cash.redwood.treehouse.StateSnapshot
  "mPBGCHFl",

  # fun start(app.cash.redwood.treehouse.ChangesSinkService, app.cash.redwood.treehouse.OnBackPressedDispatcherService, kotlinx.coroutines.flow.StateFlow<app.cash.redwood.ui.UiConfiguration>, app.cash.redwood.treehouse.StateSnapshot): kotlin.Unit
  "UkTy28z8",

  # fun start(app.cash.redwood.treehouse.ChangesSinkService, kotlinx.coroutines.flow.StateFlow<app.cash.redwood.ui.UiConfiguration>, app.cash.redwood.treehouse.StateSnapshot): kotlin.Unit
  "FiVQXMQW",

  # fun start(app.cash.redwood.treehouse.ZiplineTreehouseUi.Host): kotlin.Unit
  "h9yZr91W",
]

[app.cash.redwood.treehouse.ZiplineTreehouseUi.Host]

functions = [
  # fun addOnBackPressedCallback(app.cash.redwood.treehouse.OnBackPressedCallbackService): app.cash.redwood.treehouse.CancellableService
  "2nRsPBzK",

  # fun close(): kotlin.Unit
  "moYx+T3e",

  # fun sendChanges(kotlin.collections.List): kotlin.Unit
  "W8qOuU0t",

  # val stateSnapshot: app.cash.redwood.treehouse.StateSnapshot
  "hIDyr4lf",

  # val uiConfigurations: kotlinx.coroutines.flow.StateFlow<app.cash.redwood.ui.UiConfiguration>
  "iAkCX7gg",
]
