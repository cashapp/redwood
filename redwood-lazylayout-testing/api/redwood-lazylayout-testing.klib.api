// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, macosArm64, macosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <app.cash.redwood:redwood-lazylayout-testing>
final class app.cash.redwood.lazylayout.testing/LazyListValue : app.cash.redwood.testing/WidgetValue { // app.cash.redwood.lazylayout.testing/LazyListValue|null[0]
    constructor <init>(app.cash.redwood/Modifier =..., kotlin/Boolean, kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Unit>, kotlin/Int, kotlin/Int, app.cash.redwood.layout.api/Constraint, app.cash.redwood.layout.api/Constraint, app.cash.redwood.ui/Margin, app.cash.redwood.layout.api/CrossAxisAlignment, app.cash.redwood.lazylayout.api/ScrollItemIndex, kotlin.collections/List<app.cash.redwood.testing/WidgetValue> =..., kotlin.collections/List<app.cash.redwood.testing/WidgetValue> =...) // app.cash.redwood.lazylayout.testing/LazyListValue.<init>|<init>(app.cash.redwood.Modifier;kotlin.Boolean;kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Unit>;kotlin.Int;kotlin.Int;app.cash.redwood.layout.api.Constraint;app.cash.redwood.layout.api.Constraint;app.cash.redwood.ui.Margin;app.cash.redwood.layout.api.CrossAxisAlignment;app.cash.redwood.lazylayout.api.ScrollItemIndex;kotlin.collections.List<app.cash.redwood.testing.WidgetValue>;kotlin.collections.List<app.cash.redwood.testing.WidgetValue>){}[0]
    final fun <#A1: kotlin/Any> toWidget(app.cash.redwood.widget/WidgetSystem<#A1>): app.cash.redwood.widget/Widget<#A1> // app.cash.redwood.lazylayout.testing/LazyListValue.toWidget|toWidget(app.cash.redwood.widget.WidgetSystem<0:0>){0ยง<kotlin.Any>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.lazylayout.testing/LazyListValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.lazylayout.testing/LazyListValue.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.lazylayout.testing/LazyListValue.toString|toString(){}[0]
    final val childrenLists // app.cash.redwood.lazylayout.testing/LazyListValue.childrenLists|{}childrenLists[0]
        final fun <get-childrenLists>(): kotlin.collections/List<kotlin.collections/List<app.cash.redwood.testing/WidgetValue>> // app.cash.redwood.lazylayout.testing/LazyListValue.childrenLists.<get-childrenLists>|<get-childrenLists>(){}[0]
    final val crossAxisAlignment // app.cash.redwood.lazylayout.testing/LazyListValue.crossAxisAlignment|{}crossAxisAlignment[0]
        final fun <get-crossAxisAlignment>(): app.cash.redwood.layout.api/CrossAxisAlignment // app.cash.redwood.lazylayout.testing/LazyListValue.crossAxisAlignment.<get-crossAxisAlignment>|<get-crossAxisAlignment>(){}[0]
    final val height // app.cash.redwood.lazylayout.testing/LazyListValue.height|{}height[0]
        final fun <get-height>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.lazylayout.testing/LazyListValue.height.<get-height>|<get-height>(){}[0]
    final val isVertical // app.cash.redwood.lazylayout.testing/LazyListValue.isVertical|{}isVertical[0]
        final fun <get-isVertical>(): kotlin/Boolean // app.cash.redwood.lazylayout.testing/LazyListValue.isVertical.<get-isVertical>|<get-isVertical>(){}[0]
    final val items // app.cash.redwood.lazylayout.testing/LazyListValue.items|{}items[0]
        final fun <get-items>(): kotlin.collections/List<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.lazylayout.testing/LazyListValue.items.<get-items>|<get-items>(){}[0]
    final val itemsAfter // app.cash.redwood.lazylayout.testing/LazyListValue.itemsAfter|{}itemsAfter[0]
        final fun <get-itemsAfter>(): kotlin/Int // app.cash.redwood.lazylayout.testing/LazyListValue.itemsAfter.<get-itemsAfter>|<get-itemsAfter>(){}[0]
    final val itemsBefore // app.cash.redwood.lazylayout.testing/LazyListValue.itemsBefore|{}itemsBefore[0]
        final fun <get-itemsBefore>(): kotlin/Int // app.cash.redwood.lazylayout.testing/LazyListValue.itemsBefore.<get-itemsBefore>|<get-itemsBefore>(){}[0]
    final val margin // app.cash.redwood.lazylayout.testing/LazyListValue.margin|{}margin[0]
        final fun <get-margin>(): app.cash.redwood.ui/Margin // app.cash.redwood.lazylayout.testing/LazyListValue.margin.<get-margin>|<get-margin>(){}[0]
    final val modifier // app.cash.redwood.lazylayout.testing/LazyListValue.modifier|{}modifier[0]
        final fun <get-modifier>(): app.cash.redwood/Modifier // app.cash.redwood.lazylayout.testing/LazyListValue.modifier.<get-modifier>|<get-modifier>(){}[0]
    final val onViewportChanged // app.cash.redwood.lazylayout.testing/LazyListValue.onViewportChanged|{}onViewportChanged[0]
        final fun <get-onViewportChanged>(): kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Unit> // app.cash.redwood.lazylayout.testing/LazyListValue.onViewportChanged.<get-onViewportChanged>|<get-onViewportChanged>(){}[0]
    final val placeholder // app.cash.redwood.lazylayout.testing/LazyListValue.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): kotlin.collections/List<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.lazylayout.testing/LazyListValue.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    final val scrollItemIndex // app.cash.redwood.lazylayout.testing/LazyListValue.scrollItemIndex|{}scrollItemIndex[0]
        final fun <get-scrollItemIndex>(): app.cash.redwood.lazylayout.api/ScrollItemIndex // app.cash.redwood.lazylayout.testing/LazyListValue.scrollItemIndex.<get-scrollItemIndex>|<get-scrollItemIndex>(){}[0]
    final val width // app.cash.redwood.lazylayout.testing/LazyListValue.width|{}width[0]
        final fun <get-width>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.lazylayout.testing/LazyListValue.width.<get-width>|<get-width>(){}[0]
}
final class app.cash.redwood.lazylayout.testing/RedwoodLazyLayoutTestingWidgetFactory : app.cash.redwood.lazylayout.widget/RedwoodLazyLayoutWidgetFactory<app.cash.redwood.testing/WidgetValue> { // app.cash.redwood.lazylayout.testing/RedwoodLazyLayoutTestingWidgetFactory|null[0]
    constructor <init>() // app.cash.redwood.lazylayout.testing/RedwoodLazyLayoutTestingWidgetFactory.<init>|<init>(){}[0]
    final fun LazyList(): app.cash.redwood.lazylayout.widget/LazyList<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.lazylayout.testing/RedwoodLazyLayoutTestingWidgetFactory.LazyList|LazyList(){}[0]
    final fun RefreshableLazyList(): app.cash.redwood.lazylayout.widget/RefreshableLazyList<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.lazylayout.testing/RedwoodLazyLayoutTestingWidgetFactory.RefreshableLazyList|RefreshableLazyList(){}[0]
}
final class app.cash.redwood.lazylayout.testing/RefreshableLazyListValue : app.cash.redwood.testing/WidgetValue { // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue|null[0]
    constructor <init>(app.cash.redwood/Modifier =..., kotlin/Boolean, kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Unit>, kotlin/Int, kotlin/Int, kotlin/Boolean, kotlin/Function0<kotlin/Unit>?, app.cash.redwood.layout.api/Constraint, app.cash.redwood.layout.api/Constraint, app.cash.redwood.ui/Margin, app.cash.redwood.layout.api/CrossAxisAlignment, app.cash.redwood.lazylayout.api/ScrollItemIndex, kotlin/UInt, kotlin.collections/List<app.cash.redwood.testing/WidgetValue> =..., kotlin.collections/List<app.cash.redwood.testing/WidgetValue> =...) // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.<init>|<init>(app.cash.redwood.Modifier;kotlin.Boolean;kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Unit>;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Function0<kotlin.Unit>?;app.cash.redwood.layout.api.Constraint;app.cash.redwood.layout.api.Constraint;app.cash.redwood.ui.Margin;app.cash.redwood.layout.api.CrossAxisAlignment;app.cash.redwood.lazylayout.api.ScrollItemIndex;kotlin.UInt;kotlin.collections.List<app.cash.redwood.testing.WidgetValue>;kotlin.collections.List<app.cash.redwood.testing.WidgetValue>){}[0]
    final fun <#A1: kotlin/Any> toWidget(app.cash.redwood.widget/WidgetSystem<#A1>): app.cash.redwood.widget/Widget<#A1> // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.toWidget|toWidget(app.cash.redwood.widget.WidgetSystem<0:0>){0ยง<kotlin.Any>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.toString|toString(){}[0]
    final val childrenLists // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.childrenLists|{}childrenLists[0]
        final fun <get-childrenLists>(): kotlin.collections/List<kotlin.collections/List<app.cash.redwood.testing/WidgetValue>> // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.childrenLists.<get-childrenLists>|<get-childrenLists>(){}[0]
    final val crossAxisAlignment // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.crossAxisAlignment|{}crossAxisAlignment[0]
        final fun <get-crossAxisAlignment>(): app.cash.redwood.layout.api/CrossAxisAlignment // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.crossAxisAlignment.<get-crossAxisAlignment>|<get-crossAxisAlignment>(){}[0]
    final val height // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.height|{}height[0]
        final fun <get-height>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.height.<get-height>|<get-height>(){}[0]
    final val isVertical // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.isVertical|{}isVertical[0]
        final fun <get-isVertical>(): kotlin/Boolean // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.isVertical.<get-isVertical>|<get-isVertical>(){}[0]
    final val items // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.items|{}items[0]
        final fun <get-items>(): kotlin.collections/List<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.items.<get-items>|<get-items>(){}[0]
    final val itemsAfter // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.itemsAfter|{}itemsAfter[0]
        final fun <get-itemsAfter>(): kotlin/Int // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.itemsAfter.<get-itemsAfter>|<get-itemsAfter>(){}[0]
    final val itemsBefore // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.itemsBefore|{}itemsBefore[0]
        final fun <get-itemsBefore>(): kotlin/Int // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.itemsBefore.<get-itemsBefore>|<get-itemsBefore>(){}[0]
    final val margin // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.margin|{}margin[0]
        final fun <get-margin>(): app.cash.redwood.ui/Margin // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.margin.<get-margin>|<get-margin>(){}[0]
    final val modifier // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.modifier|{}modifier[0]
        final fun <get-modifier>(): app.cash.redwood/Modifier // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.modifier.<get-modifier>|<get-modifier>(){}[0]
    final val onRefresh // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.onRefresh|{}onRefresh[0]
        final fun <get-onRefresh>(): kotlin/Function0<kotlin/Unit>? // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.onRefresh.<get-onRefresh>|<get-onRefresh>(){}[0]
    final val onViewportChanged // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.onViewportChanged|{}onViewportChanged[0]
        final fun <get-onViewportChanged>(): kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Unit> // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.onViewportChanged.<get-onViewportChanged>|<get-onViewportChanged>(){}[0]
    final val placeholder // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): kotlin.collections/List<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    final val pullRefreshContentColor // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.pullRefreshContentColor|{}pullRefreshContentColor[0]
        final fun <get-pullRefreshContentColor>(): kotlin/UInt // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.pullRefreshContentColor.<get-pullRefreshContentColor>|<get-pullRefreshContentColor>(){}[0]
    final val refreshing // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.refreshing|{}refreshing[0]
        final fun <get-refreshing>(): kotlin/Boolean // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.refreshing.<get-refreshing>|<get-refreshing>(){}[0]
    final val scrollItemIndex // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.scrollItemIndex|{}scrollItemIndex[0]
        final fun <get-scrollItemIndex>(): app.cash.redwood.lazylayout.api/ScrollItemIndex // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.scrollItemIndex.<get-scrollItemIndex>|<get-scrollItemIndex>(){}[0]
    final val width // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.width|{}width[0]
        final fun <get-width>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.lazylayout.testing/RefreshableLazyListValue.width.<get-width>|<get-width>(){}[0]
}
final suspend fun <#A: kotlin/Any?> app.cash.redwood.lazylayout.testing/RedwoodLazyLayoutTester(app.cash.redwood.ui/OnBackPressedDispatcher =..., app.cash.redwood.testing/TestSavedState? =..., app.cash.redwood.ui/UiConfiguration =..., kotlin.coroutines/SuspendFunction1<app.cash.redwood.testing/TestRedwoodComposition<kotlin.collections/List<app.cash.redwood.testing/WidgetValue>>, #A>): #A // app.cash.redwood.lazylayout.testing/RedwoodLazyLayoutTester|RedwoodLazyLayoutTester(app.cash.redwood.ui.OnBackPressedDispatcher;app.cash.redwood.testing.TestSavedState?;app.cash.redwood.ui.UiConfiguration;kotlin.coroutines.SuspendFunction1<app.cash.redwood.testing.TestRedwoodComposition<kotlin.collections.List<app.cash.redwood.testing.WidgetValue>>,0:0>){0ยง<kotlin.Any?>}[0]
