// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <app.cash.redwood:redwood-lazylayout-compose>
abstract interface app.cash.redwood.lazylayout.compose/LazyListScope { // app.cash.redwood.lazylayout.compose/LazyListScope|null[0]
    abstract fun item(kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>) // app.cash.redwood.lazylayout.compose/LazyListScope.item|item(kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>){}[0]
    abstract fun items(kotlin/Int, kotlin/Function3<kotlin/Int, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>) // app.cash.redwood.lazylayout.compose/LazyListScope.items|items(kotlin.Int;kotlin.Function3<kotlin.Int,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>){}[0]
}
final fun app.cash.redwood.lazylayout.compose/LazyColumn(kotlin/Boolean, kotlin/Function0<kotlin/Unit>?, kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, app.cash.redwood/Modifier?, app.cash.redwood.lazylayout.compose/LazyListState?, app.cash.redwood.layout.api/Constraint?, app.cash.redwood.layout.api/Constraint?, app.cash.redwood.ui/Margin?, app.cash.redwood.layout.api/CrossAxisAlignment?, kotlin/UInt, kotlin/Function1<app.cash.redwood.lazylayout.compose/LazyListScope, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // app.cash.redwood.lazylayout.compose/LazyColumn|LazyColumn(kotlin.Boolean;kotlin.Function0<kotlin.Unit>?;kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;app.cash.redwood.Modifier?;app.cash.redwood.lazylayout.compose.LazyListState?;app.cash.redwood.layout.api.Constraint?;app.cash.redwood.layout.api.Constraint?;app.cash.redwood.ui.Margin?;app.cash.redwood.layout.api.CrossAxisAlignment?;kotlin.UInt;kotlin.Function1<app.cash.redwood.lazylayout.compose.LazyListScope,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun app.cash.redwood.lazylayout.compose/LazyColumn(kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, app.cash.redwood/Modifier?, app.cash.redwood.lazylayout.compose/LazyListState?, app.cash.redwood.layout.api/Constraint?, app.cash.redwood.layout.api/Constraint?, app.cash.redwood.ui/Margin?, app.cash.redwood.layout.api/CrossAxisAlignment?, kotlin/Function1<app.cash.redwood.lazylayout.compose/LazyListScope, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // app.cash.redwood.lazylayout.compose/LazyColumn|LazyColumn(kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;app.cash.redwood.Modifier?;app.cash.redwood.lazylayout.compose.LazyListState?;app.cash.redwood.layout.api.Constraint?;app.cash.redwood.layout.api.Constraint?;app.cash.redwood.ui.Margin?;app.cash.redwood.layout.api.CrossAxisAlignment?;kotlin.Function1<app.cash.redwood.lazylayout.compose.LazyListScope,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun app.cash.redwood.lazylayout.compose/LazyList(kotlin/Boolean, kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Unit>, kotlin/Int, kotlin/Int, app.cash.redwood.layout.api/Constraint, app.cash.redwood.layout.api/Constraint, app.cash.redwood.ui/Margin, app.cash.redwood.layout.api/CrossAxisAlignment, app.cash.redwood.lazylayout.api/ScrollItemIndex, app.cash.redwood/Modifier?, kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // app.cash.redwood.lazylayout.compose/LazyList|LazyList(kotlin.Boolean;kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Unit>;kotlin.Int;kotlin.Int;app.cash.redwood.layout.api.Constraint;app.cash.redwood.layout.api.Constraint;app.cash.redwood.ui.Margin;app.cash.redwood.layout.api.CrossAxisAlignment;app.cash.redwood.lazylayout.api.ScrollItemIndex;app.cash.redwood.Modifier?;kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun app.cash.redwood.lazylayout.compose/LazyRow(kotlin/Boolean, kotlin/Function0<kotlin/Unit>?, kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, app.cash.redwood/Modifier?, app.cash.redwood.lazylayout.compose/LazyListState?, app.cash.redwood.layout.api/Constraint?, app.cash.redwood.layout.api/Constraint?, app.cash.redwood.ui/Margin?, app.cash.redwood.layout.api/CrossAxisAlignment?, kotlin/UInt, kotlin/Function1<app.cash.redwood.lazylayout.compose/LazyListScope, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // app.cash.redwood.lazylayout.compose/LazyRow|LazyRow(kotlin.Boolean;kotlin.Function0<kotlin.Unit>?;kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;app.cash.redwood.Modifier?;app.cash.redwood.lazylayout.compose.LazyListState?;app.cash.redwood.layout.api.Constraint?;app.cash.redwood.layout.api.Constraint?;app.cash.redwood.ui.Margin?;app.cash.redwood.layout.api.CrossAxisAlignment?;kotlin.UInt;kotlin.Function1<app.cash.redwood.lazylayout.compose.LazyListScope,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun app.cash.redwood.lazylayout.compose/LazyRow(kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, app.cash.redwood/Modifier?, app.cash.redwood.lazylayout.compose/LazyListState?, app.cash.redwood.layout.api/Constraint?, app.cash.redwood.layout.api/Constraint?, app.cash.redwood.ui/Margin?, app.cash.redwood.layout.api/CrossAxisAlignment?, kotlin/Function1<app.cash.redwood.lazylayout.compose/LazyListScope, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // app.cash.redwood.lazylayout.compose/LazyRow|LazyRow(kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;app.cash.redwood.Modifier?;app.cash.redwood.lazylayout.compose.LazyListState?;app.cash.redwood.layout.api.Constraint?;app.cash.redwood.layout.api.Constraint?;app.cash.redwood.ui.Margin?;app.cash.redwood.layout.api.CrossAxisAlignment?;kotlin.Function1<app.cash.redwood.lazylayout.compose.LazyListScope,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun app.cash.redwood.lazylayout.compose/RefreshableLazyList(kotlin/Boolean, kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Unit>, kotlin/Int, kotlin/Int, kotlin/Boolean, kotlin/Function0<kotlin/Unit>?, app.cash.redwood.layout.api/Constraint, app.cash.redwood.layout.api/Constraint, app.cash.redwood.ui/Margin, app.cash.redwood.layout.api/CrossAxisAlignment, app.cash.redwood.lazylayout.api/ScrollItemIndex, kotlin/UInt, app.cash.redwood/Modifier?, kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // app.cash.redwood.lazylayout.compose/RefreshableLazyList|RefreshableLazyList(kotlin.Boolean;kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Unit>;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Function0<kotlin.Unit>?;app.cash.redwood.layout.api.Constraint;app.cash.redwood.layout.api.Constraint;app.cash.redwood.ui.Margin;app.cash.redwood.layout.api.CrossAxisAlignment;app.cash.redwood.lazylayout.api.ScrollItemIndex;kotlin.UInt;app.cash.redwood.Modifier?;kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun app.cash.redwood.lazylayout.compose/rememberLazyListState(androidx.compose.runtime/Composer?, kotlin/Int): app.cash.redwood.lazylayout.compose/LazyListState // app.cash.redwood.lazylayout.compose/rememberLazyListState|rememberLazyListState(androidx.compose.runtime.Composer?;kotlin.Int){}[0]
final inline fun <#A: kotlin/Any?> (app.cash.redwood.lazylayout.compose/LazyListScope).app.cash.redwood.lazylayout.compose/items(kotlin.collections/List<#A>, crossinline kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>) // app.cash.redwood.lazylayout.compose/items|items@app.cash.redwood.lazylayout.compose.LazyListScope(kotlin.collections.List<0:0>;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (app.cash.redwood.lazylayout.compose/LazyListScope).app.cash.redwood.lazylayout.compose/items(kotlin/Array<#A>, crossinline kotlin/Function3<#A, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>) // app.cash.redwood.lazylayout.compose/items|items@app.cash.redwood.lazylayout.compose.LazyListScope(kotlin.Array<0:0>;kotlin.Function3<0:0,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (app.cash.redwood.lazylayout.compose/LazyListScope).app.cash.redwood.lazylayout.compose/itemsIndexed(kotlin.collections/List<#A>, crossinline kotlin/Function4<kotlin/Int, #A, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>) // app.cash.redwood.lazylayout.compose/itemsIndexed|itemsIndexed@app.cash.redwood.lazylayout.compose.LazyListScope(kotlin.collections.List<0:0>;kotlin.Function4<kotlin.Int,0:0,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (app.cash.redwood.lazylayout.compose/LazyListScope).app.cash.redwood.lazylayout.compose/itemsIndexed(kotlin/Array<#A>, crossinline kotlin/Function4<kotlin/Int, #A, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>) // app.cash.redwood.lazylayout.compose/itemsIndexed|itemsIndexed@app.cash.redwood.lazylayout.compose.LazyListScope(kotlin.Array<0:0>;kotlin.Function4<kotlin.Int,0:0,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>){0ยง<kotlin.Any?>}[0]
final val app.cash.redwood.lazylayout.compose.layout/app_cash_redwood_lazylayout_compose_layout_IntervalList_Interval$stableprop // app.cash.redwood.lazylayout.compose.layout/app_cash_redwood_lazylayout_compose_layout_IntervalList_Interval$stableprop|#static{}app_cash_redwood_lazylayout_compose_layout_IntervalList_Interval$stableprop[0]
final val app.cash.redwood.lazylayout.compose.layout/app_cash_redwood_lazylayout_compose_layout_LazyLayoutIntervalContent$stableprop // app.cash.redwood.lazylayout.compose.layout/app_cash_redwood_lazylayout_compose_layout_LazyLayoutIntervalContent$stableprop|#static{}app_cash_redwood_lazylayout_compose_layout_LazyLayoutIntervalContent$stableprop[0]
final val app.cash.redwood.lazylayout.compose.layout/app_cash_redwood_lazylayout_compose_layout_MutableIntervalList$stableprop // app.cash.redwood.lazylayout.compose.layout/app_cash_redwood_lazylayout_compose_layout_MutableIntervalList$stableprop|#static{}app_cash_redwood_lazylayout_compose_layout_MutableIntervalList$stableprop[0]
final val app.cash.redwood.lazylayout.compose/app_cash_redwood_lazylayout_compose_LazyListInterval$stableprop // app.cash.redwood.lazylayout.compose/app_cash_redwood_lazylayout_compose_LazyListInterval$stableprop|#static{}app_cash_redwood_lazylayout_compose_LazyListInterval$stableprop[0]
final val app.cash.redwood.lazylayout.compose/app_cash_redwood_lazylayout_compose_LazyListIntervalContent$stableprop // app.cash.redwood.lazylayout.compose/app_cash_redwood_lazylayout_compose_LazyListIntervalContent$stableprop|#static{}app_cash_redwood_lazylayout_compose_LazyListIntervalContent$stableprop[0]
final val app.cash.redwood.lazylayout.compose/app_cash_redwood_lazylayout_compose_LazyListState$stableprop // app.cash.redwood.lazylayout.compose/app_cash_redwood_lazylayout_compose_LazyListState$stableprop|#static{}app_cash_redwood_lazylayout_compose_LazyListState$stableprop[0]
open annotation class app.cash.redwood.lazylayout.compose/ExperimentalRedwoodLazyLayoutApi : kotlin/Annotation { // app.cash.redwood.lazylayout.compose/ExperimentalRedwoodLazyLayoutApi|null[0]
    constructor <init>() // app.cash.redwood.lazylayout.compose/ExperimentalRedwoodLazyLayoutApi.<init>|<init>(){}[0]
}
open class app.cash.redwood.lazylayout.compose/LazyListState { // app.cash.redwood.lazylayout.compose/LazyListState|null[0]
    constructor <init>() // app.cash.redwood.lazylayout.compose/LazyListState.<init>|<init>(){}[0]
    final fun onUserScroll(kotlin/Int, kotlin/Int) // app.cash.redwood.lazylayout.compose/LazyListState.onUserScroll|onUserScroll(kotlin.Int;kotlin.Int){}[0]
    final fun programmaticScroll(kotlin/Int, kotlin/Boolean, kotlin/Boolean = ...) // app.cash.redwood.lazylayout.compose/LazyListState.programmaticScroll|programmaticScroll(kotlin.Int;kotlin.Boolean;kotlin.Boolean){}[0]
    final var firstIndex // app.cash.redwood.lazylayout.compose/LazyListState.firstIndex|{}firstIndex[0]
        final fun <get-firstIndex>(): kotlin/Int // app.cash.redwood.lazylayout.compose/LazyListState.firstIndex.<get-firstIndex>|<get-firstIndex>(){}[0]
    final var lastIndex // app.cash.redwood.lazylayout.compose/LazyListState.lastIndex|{}lastIndex[0]
        final fun <get-lastIndex>(): kotlin/Int // app.cash.redwood.lazylayout.compose/LazyListState.lastIndex.<get-lastIndex>|<get-lastIndex>(){}[0]
    final var preloadAfterItemCount // app.cash.redwood.lazylayout.compose/LazyListState.preloadAfterItemCount|{}preloadAfterItemCount[0]
        final fun <get-preloadAfterItemCount>(): kotlin/Int // app.cash.redwood.lazylayout.compose/LazyListState.preloadAfterItemCount.<get-preloadAfterItemCount>|<get-preloadAfterItemCount>(){}[0]
        final fun <set-preloadAfterItemCount>(kotlin/Int) // app.cash.redwood.lazylayout.compose/LazyListState.preloadAfterItemCount.<set-preloadAfterItemCount>|<set-preloadAfterItemCount>(kotlin.Int){}[0]
    final var preloadBeforeItemCount // app.cash.redwood.lazylayout.compose/LazyListState.preloadBeforeItemCount|{}preloadBeforeItemCount[0]
        final fun <get-preloadBeforeItemCount>(): kotlin/Int // app.cash.redwood.lazylayout.compose/LazyListState.preloadBeforeItemCount.<get-preloadBeforeItemCount>|<get-preloadBeforeItemCount>(){}[0]
        final fun <set-preloadBeforeItemCount>(kotlin/Int) // app.cash.redwood.lazylayout.compose/LazyListState.preloadBeforeItemCount.<set-preloadBeforeItemCount>|<set-preloadBeforeItemCount>(kotlin.Int){}[0]
    final var programmaticScrollIndex // app.cash.redwood.lazylayout.compose/LazyListState.programmaticScrollIndex|{}programmaticScrollIndex[0]
        final fun <get-programmaticScrollIndex>(): app.cash.redwood.lazylayout.api/ScrollItemIndex // app.cash.redwood.lazylayout.compose/LazyListState.programmaticScrollIndex.<get-programmaticScrollIndex>|<get-programmaticScrollIndex>(){}[0]
}
