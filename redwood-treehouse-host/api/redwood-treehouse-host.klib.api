// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, macosArm64, macosX64]
// Alias: ios => [iosArm64, iosSimulatorArm64, iosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <app.cash.redwood:redwood-treehouse-host>
abstract fun interface <#A: app.cash.redwood.treehouse/AppService> app.cash.redwood.treehouse/TreehouseContentSource { // app.cash.redwood.treehouse/TreehouseContentSource|null[0]
    abstract fun get(#A): app.cash.redwood.treehouse/ZiplineTreehouseUi // app.cash.redwood.treehouse/TreehouseContentSource.get|get(1:0){}[0]
}
abstract interface <#A: kotlin/Any> app.cash.redwood.treehouse/TreehouseView : app.cash.redwood.widget/RedwoodView<#A> { // app.cash.redwood.treehouse/TreehouseView|null[0]
    abstract fun interface <#A1: kotlin/Any> ReadyForContentChangeListener { // app.cash.redwood.treehouse/TreehouseView.ReadyForContentChangeListener|null[0]
        abstract fun onReadyForContentChanged(app.cash.redwood.treehouse/TreehouseView<#A1>) // app.cash.redwood.treehouse/TreehouseView.ReadyForContentChangeListener.onReadyForContentChanged|onReadyForContentChanged(app.cash.redwood.treehouse.TreehouseView<1:0>){}[0]
    }
    abstract fun interface <#A1: kotlin/Any> WidgetSystem { // app.cash.redwood.treehouse/TreehouseView.WidgetSystem|null[0]
        abstract fun widgetFactory(kotlinx.serialization.json/Json, app.cash.redwood.protocol.host/ProtocolMismatchHandler): app.cash.redwood.protocol.host/ProtocolFactory<#A1> // app.cash.redwood.treehouse/TreehouseView.WidgetSystem.widgetFactory|widgetFactory(kotlinx.serialization.json.Json;app.cash.redwood.protocol.host.ProtocolMismatchHandler){}[0]
    }
    abstract interface SaveCallback { // app.cash.redwood.treehouse/TreehouseView.SaveCallback|null[0]
        abstract fun performSave(kotlin/String) // app.cash.redwood.treehouse/TreehouseView.SaveCallback.performSave|performSave(kotlin.String){}[0]
    }
    abstract val readyForContent // app.cash.redwood.treehouse/TreehouseView.readyForContent|{}readyForContent[0]
        abstract fun <get-readyForContent>(): kotlin/Boolean // app.cash.redwood.treehouse/TreehouseView.readyForContent.<get-readyForContent>|<get-readyForContent>(){}[0]
    abstract val stateSnapshotId // app.cash.redwood.treehouse/TreehouseView.stateSnapshotId|{}stateSnapshotId[0]
        abstract fun <get-stateSnapshotId>(): app.cash.redwood.treehouse/StateSnapshot.Id // app.cash.redwood.treehouse/TreehouseView.stateSnapshotId.<get-stateSnapshotId>|<get-stateSnapshotId>(){}[0]
    abstract val widgetSystem // app.cash.redwood.treehouse/TreehouseView.widgetSystem|{}widgetSystem[0]
        abstract fun <get-widgetSystem>(): app.cash.redwood.treehouse/TreehouseView.WidgetSystem<#A> // app.cash.redwood.treehouse/TreehouseView.widgetSystem.<get-widgetSystem>|<get-widgetSystem>(){}[0]
    abstract var readyForContentChangeListener // app.cash.redwood.treehouse/TreehouseView.readyForContentChangeListener|{}readyForContentChangeListener[0]
        abstract fun <get-readyForContentChangeListener>(): app.cash.redwood.treehouse/TreehouseView.ReadyForContentChangeListener<#A>? // app.cash.redwood.treehouse/TreehouseView.readyForContentChangeListener.<get-readyForContentChangeListener>|<get-readyForContentChangeListener>(){}[0]
        abstract fun <set-readyForContentChangeListener>(app.cash.redwood.treehouse/TreehouseView.ReadyForContentChangeListener<#A>?) // app.cash.redwood.treehouse/TreehouseView.readyForContentChangeListener.<set-readyForContentChangeListener>|<set-readyForContentChangeListener>(app.cash.redwood.treehouse.TreehouseView.ReadyForContentChangeListener<1:0>?){}[0]
    abstract var saveCallback // app.cash.redwood.treehouse/TreehouseView.saveCallback|{}saveCallback[0]
        abstract fun <get-saveCallback>(): app.cash.redwood.treehouse/TreehouseView.SaveCallback? // app.cash.redwood.treehouse/TreehouseView.saveCallback.<get-saveCallback>|<get-saveCallback>(){}[0]
        abstract fun <set-saveCallback>(app.cash.redwood.treehouse/TreehouseView.SaveCallback?) // app.cash.redwood.treehouse/TreehouseView.saveCallback.<set-saveCallback>|<set-saveCallback>(app.cash.redwood.treehouse.TreehouseView.SaveCallback?){}[0]
}
abstract interface app.cash.redwood.treehouse/Content { // app.cash.redwood.treehouse/Content|null[0]
    abstract fun bind(app.cash.redwood.treehouse/TreehouseView<*>) // app.cash.redwood.treehouse/Content.bind|bind(app.cash.redwood.treehouse.TreehouseView<*>){}[0]
    abstract fun preload(app.cash.redwood.ui/OnBackPressedDispatcher, kotlinx.coroutines.flow/StateFlow<app.cash.redwood.ui/UiConfiguration>) // app.cash.redwood.treehouse/Content.preload|preload(app.cash.redwood.ui.OnBackPressedDispatcher;kotlinx.coroutines.flow.StateFlow<app.cash.redwood.ui.UiConfiguration>){}[0]
    abstract fun unbind() // app.cash.redwood.treehouse/Content.unbind|unbind(){}[0]
    abstract suspend fun awaitContent() // app.cash.redwood.treehouse/Content.awaitContent|awaitContent(){}[0]
}
abstract interface app.cash.redwood.treehouse/StateStore { // app.cash.redwood.treehouse/StateStore|null[0]
    abstract suspend fun get(kotlin/String): app.cash.redwood.treehouse/StateSnapshot? // app.cash.redwood.treehouse/StateStore.get|get(kotlin.String){}[0]
    abstract suspend fun put(kotlin/String, app.cash.redwood.treehouse/StateSnapshot) // app.cash.redwood.treehouse/StateStore.put|put(kotlin.String;app.cash.redwood.treehouse.StateSnapshot){}[0]
}
abstract interface app.cash.redwood.treehouse/TreehouseDispatchers { // app.cash.redwood.treehouse/TreehouseDispatchers|null[0]
    abstract fun checkUi() // app.cash.redwood.treehouse/TreehouseDispatchers.checkUi|checkUi(){}[0]
    abstract fun checkZipline() // app.cash.redwood.treehouse/TreehouseDispatchers.checkZipline|checkZipline(){}[0]
    abstract fun close() // app.cash.redwood.treehouse/TreehouseDispatchers.close|close(){}[0]
    abstract val ui // app.cash.redwood.treehouse/TreehouseDispatchers.ui|{}ui[0]
        abstract fun <get-ui>(): kotlinx.coroutines/CoroutineDispatcher // app.cash.redwood.treehouse/TreehouseDispatchers.ui.<get-ui>|<get-ui>(){}[0]
    abstract val zipline // app.cash.redwood.treehouse/TreehouseDispatchers.zipline|{}zipline[0]
        abstract fun <get-zipline>(): kotlinx.coroutines/CoroutineDispatcher // app.cash.redwood.treehouse/TreehouseDispatchers.zipline.<get-zipline>|<get-zipline>(){}[0]
}
final class <#A: app.cash.redwood.treehouse/AppService> app.cash.redwood.treehouse/TreehouseApp { // app.cash.redwood.treehouse/TreehouseApp|null[0]
    abstract class <#A1: app.cash.redwood.treehouse/AppService> Spec { // app.cash.redwood.treehouse/TreehouseApp.Spec|null[0]
        abstract fun bindServices(app.cash.zipline/Zipline) // app.cash.redwood.treehouse/TreehouseApp.Spec.bindServices|bindServices(app.cash.zipline.Zipline){}[0]
        abstract fun create(app.cash.zipline/Zipline): #A1 // app.cash.redwood.treehouse/TreehouseApp.Spec.create|create(app.cash.zipline.Zipline){}[0]
        abstract val manifestUrl // app.cash.redwood.treehouse/TreehouseApp.Spec.manifestUrl|<get-manifestUrl>(){}[0]
            abstract fun <get-manifestUrl>(): kotlinx.coroutines.flow/Flow<kotlin/String> // app.cash.redwood.treehouse/TreehouseApp.Spec.manifestUrl.<get-manifestUrl>|<get-manifestUrl>(){}[0]
        abstract val name // app.cash.redwood.treehouse/TreehouseApp.Spec.name|<get-name>(){}[0]
            abstract fun <get-name>(): kotlin/String // app.cash.redwood.treehouse/TreehouseApp.Spec.name.<get-name>|<get-name>(){}[0]
        constructor <init>() // app.cash.redwood.treehouse/TreehouseApp.Spec.<init>|<init>(){}[0]
        open val freshnessChecker // app.cash.redwood.treehouse/TreehouseApp.Spec.freshnessChecker|<get-freshnessChecker>(){}[0]
            open fun <get-freshnessChecker>(): app.cash.zipline.loader/FreshnessChecker // app.cash.redwood.treehouse/TreehouseApp.Spec.freshnessChecker.<get-freshnessChecker>|<get-freshnessChecker>(){}[0]
        open val loadCodeFromNetworkOnly // app.cash.redwood.treehouse/TreehouseApp.Spec.loadCodeFromNetworkOnly|<get-loadCodeFromNetworkOnly>(){}[0]
            open fun <get-loadCodeFromNetworkOnly>(): kotlin/Boolean // app.cash.redwood.treehouse/TreehouseApp.Spec.loadCodeFromNetworkOnly.<get-loadCodeFromNetworkOnly>|<get-loadCodeFromNetworkOnly>(){}[0]
        open val serializersModule // app.cash.redwood.treehouse/TreehouseApp.Spec.serializersModule|<get-serializersModule>(){}[0]
            open fun <get-serializersModule>(): kotlinx.serialization.modules/SerializersModule // app.cash.redwood.treehouse/TreehouseApp.Spec.serializersModule.<get-serializersModule>|<get-serializersModule>(){}[0]
    }
    final class Factory : okio/Closeable { // app.cash.redwood.treehouse/TreehouseApp.Factory|null[0]
        final fun <#A2: app.cash.redwood.treehouse/AppService> create(kotlinx.coroutines/CoroutineScope, app.cash.redwood.treehouse/TreehouseApp.Spec<#A2>, app.cash.redwood.treehouse/EventListener.Factory =...): app.cash.redwood.treehouse/TreehouseApp<#A2> // app.cash.redwood.treehouse/TreehouseApp.Factory.create|create(kotlinx.coroutines.CoroutineScope;app.cash.redwood.treehouse.TreehouseApp.Spec<0:0>;app.cash.redwood.treehouse.EventListener.Factory){0ยง<app.cash.redwood.treehouse.AppService>}[0]
        final fun close() // app.cash.redwood.treehouse/TreehouseApp.Factory.close|close(){}[0]
        final val dispatchers // app.cash.redwood.treehouse/TreehouseApp.Factory.dispatchers|<get-dispatchers>(){}[0]
            final fun <get-dispatchers>(): app.cash.redwood.treehouse/TreehouseDispatchers // app.cash.redwood.treehouse/TreehouseApp.Factory.dispatchers.<get-dispatchers>|<get-dispatchers>(){}[0]
    }
    final fun createContent(app.cash.redwood.treehouse/TreehouseContentSource<#A>, app.cash.redwood.treehouse/CodeListener =...): app.cash.redwood.treehouse/Content // app.cash.redwood.treehouse/TreehouseApp.createContent|createContent(app.cash.redwood.treehouse.TreehouseContentSource<1:0>;app.cash.redwood.treehouse.CodeListener){}[0]
    final fun restart() // app.cash.redwood.treehouse/TreehouseApp.restart|restart(){}[0]
    final fun start() // app.cash.redwood.treehouse/TreehouseApp.start|start(){}[0]
    final fun stop() // app.cash.redwood.treehouse/TreehouseApp.stop|stop(){}[0]
    final val dispatchers // app.cash.redwood.treehouse/TreehouseApp.dispatchers|{}dispatchers[0]
        final fun <get-dispatchers>(): app.cash.redwood.treehouse/TreehouseDispatchers // app.cash.redwood.treehouse/TreehouseApp.dispatchers.<get-dispatchers>|<get-dispatchers>(){}[0]
    final val spec // app.cash.redwood.treehouse/TreehouseApp.spec|{}spec[0]
        final fun <get-spec>(): app.cash.redwood.treehouse/TreehouseApp.Spec<#A> // app.cash.redwood.treehouse/TreehouseApp.spec.<get-spec>|<get-spec>(){}[0]
    final val zipline // app.cash.redwood.treehouse/TreehouseApp.zipline|{}zipline[0]
        final fun <get-zipline>(): app.cash.zipline/Zipline? // app.cash.redwood.treehouse/TreehouseApp.zipline.<get-zipline>|<get-zipline>(){}[0]
}
final class <#A: kotlin/Any> app.cash.redwood.treehouse/ChangeListRenderer { // app.cash.redwood.treehouse/ChangeListRenderer|null[0]
    constructor <init>(kotlinx.serialization.json/Json) // app.cash.redwood.treehouse/ChangeListRenderer.<init>|<init>(kotlinx.serialization.json.Json){}[0]
    final fun render(app.cash.redwood.treehouse/TreehouseView<#A>, app.cash.redwood.protocol/SnapshotChangeList) // app.cash.redwood.treehouse/ChangeListRenderer.render|render(app.cash.redwood.treehouse.TreehouseView<1:0>;app.cash.redwood.protocol.SnapshotChangeList){}[0]
}
final class app.cash.redwood.treehouse/MemoryStateStore : app.cash.redwood.treehouse/StateStore { // app.cash.redwood.treehouse/MemoryStateStore|null[0]
    constructor <init>() // app.cash.redwood.treehouse/MemoryStateStore.<init>|<init>(){}[0]
    final suspend fun get(kotlin/String): app.cash.redwood.treehouse/StateSnapshot? // app.cash.redwood.treehouse/MemoryStateStore.get|get(kotlin.String){}[0]
    final suspend fun put(kotlin/String, app.cash.redwood.treehouse/StateSnapshot) // app.cash.redwood.treehouse/MemoryStateStore.put|put(kotlin.String;app.cash.redwood.treehouse.StateSnapshot){}[0]
}
final fun <#A: app.cash.redwood.treehouse/AppService, #B: kotlin/Any> (app.cash.redwood.treehouse/TreehouseContentSource<#A>).app.cash.redwood.treehouse/bindWhenReady(app.cash.redwood.treehouse/TreehouseView<#B>, app.cash.redwood.treehouse/TreehouseApp<#A>, app.cash.redwood.treehouse/CodeListener =...): okio/Closeable // app.cash.redwood.treehouse/bindWhenReady|bindWhenReady@app.cash.redwood.treehouse.TreehouseContentSource<0:0>(app.cash.redwood.treehouse.TreehouseView<0:1>;app.cash.redwood.treehouse.TreehouseApp<0:0>;app.cash.redwood.treehouse.CodeListener){0ยง<app.cash.redwood.treehouse.AppService>;1ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (app.cash.redwood.treehouse/Content).app.cash.redwood.treehouse/bindWhenReady(app.cash.redwood.treehouse/TreehouseView<#A>): okio/Closeable // app.cash.redwood.treehouse/bindWhenReady|bindWhenReady@app.cash.redwood.treehouse.Content(app.cash.redwood.treehouse.TreehouseView<0:0>){0ยง<kotlin.Any>}[0]
open class app.cash.redwood.treehouse/CodeListener { // app.cash.redwood.treehouse/CodeListener|null[0]
    constructor <init>() // app.cash.redwood.treehouse/CodeListener.<init>|<init>(){}[0]
    open fun onCodeLoaded(app.cash.redwood.treehouse/TreehouseApp<*>, app.cash.redwood.treehouse/TreehouseView<*>, kotlin/Boolean) // app.cash.redwood.treehouse/CodeListener.onCodeLoaded|onCodeLoaded(app.cash.redwood.treehouse.TreehouseApp<*>;app.cash.redwood.treehouse.TreehouseView<*>;kotlin.Boolean){}[0]
    open fun onInitialCodeLoading(app.cash.redwood.treehouse/TreehouseApp<*>, app.cash.redwood.treehouse/TreehouseView<*>) // app.cash.redwood.treehouse/CodeListener.onInitialCodeLoading|onInitialCodeLoading(app.cash.redwood.treehouse.TreehouseApp<*>;app.cash.redwood.treehouse.TreehouseView<*>){}[0]
    open fun onUncaughtException(app.cash.redwood.treehouse/TreehouseApp<*>, app.cash.redwood.treehouse/TreehouseView<*>, kotlin/Throwable) // app.cash.redwood.treehouse/CodeListener.onUncaughtException|onUncaughtException(app.cash.redwood.treehouse.TreehouseApp<*>;app.cash.redwood.treehouse.TreehouseView<*>;kotlin.Throwable){}[0]
}
open class app.cash.redwood.treehouse/EventListener { // app.cash.redwood.treehouse/EventListener|null[0]
    abstract fun interface Factory { // app.cash.redwood.treehouse/EventListener.Factory|null[0]
        abstract fun create(app.cash.redwood.treehouse/TreehouseApp<*>, kotlin/String?): app.cash.redwood.treehouse/EventListener // app.cash.redwood.treehouse/EventListener.Factory.create|create(app.cash.redwood.treehouse.TreehouseApp<*>;kotlin.String?){}[0]
    }
    constructor <init>() // app.cash.redwood.treehouse/EventListener.<init>|<init>(){}[0]
    final object Companion { // app.cash.redwood.treehouse/EventListener.Companion|null[0]
        final val NONE // app.cash.redwood.treehouse/EventListener.Companion.NONE|{}NONE[0]
            final fun <get-NONE>(): app.cash.redwood.treehouse/EventListener.Factory // app.cash.redwood.treehouse/EventListener.Companion.NONE.<get-NONE>|<get-NONE>(){}[0]
    }
    open fun bindService(kotlin/String, app.cash.zipline/ZiplineService) // app.cash.redwood.treehouse/EventListener.bindService|bindService(kotlin.String;app.cash.zipline.ZiplineService){}[0]
    open fun callEnd(app.cash.zipline/Call, app.cash.zipline/CallResult, kotlin/Any?) // app.cash.redwood.treehouse/EventListener.callEnd|callEnd(app.cash.zipline.Call;app.cash.zipline.CallResult;kotlin.Any?){}[0]
    open fun callStart(app.cash.zipline/Call): kotlin/Any? // app.cash.redwood.treehouse/EventListener.callStart|callStart(app.cash.zipline.Call){}[0]
    open fun codeLoadFailed(kotlin/Exception, kotlin/Any?) // app.cash.redwood.treehouse/EventListener.codeLoadFailed|codeLoadFailed(kotlin.Exception;kotlin.Any?){}[0]
    open fun codeLoadSkipped(kotlin/Any?) // app.cash.redwood.treehouse/EventListener.codeLoadSkipped|codeLoadSkipped(kotlin.Any?){}[0]
    open fun codeLoadSkippedNotFresh(kotlin/Any?) // app.cash.redwood.treehouse/EventListener.codeLoadSkippedNotFresh|codeLoadSkippedNotFresh(kotlin.Any?){}[0]
    open fun codeLoadStart(): kotlin/Any? // app.cash.redwood.treehouse/EventListener.codeLoadStart|codeLoadStart(){}[0]
    open fun codeLoadSuccess(app.cash.zipline/ZiplineManifest, app.cash.zipline/Zipline, kotlin/Any?) // app.cash.redwood.treehouse/EventListener.codeLoadSuccess|codeLoadSuccess(app.cash.zipline.ZiplineManifest;app.cash.zipline.Zipline;kotlin.Any?){}[0]
    open fun codeUnloaded() // app.cash.redwood.treehouse/EventListener.codeUnloaded|codeUnloaded(){}[0]
    open fun downloadFailed(kotlin/String, kotlin/Exception, kotlin/Any?) // app.cash.redwood.treehouse/EventListener.downloadFailed|downloadFailed(kotlin.String;kotlin.Exception;kotlin.Any?){}[0]
    open fun downloadStart(kotlin/String): kotlin/Any? // app.cash.redwood.treehouse/EventListener.downloadStart|downloadStart(kotlin.String){}[0]
    open fun downloadSuccess(kotlin/String, kotlin/Any?) // app.cash.redwood.treehouse/EventListener.downloadSuccess|downloadSuccess(kotlin.String;kotlin.Any?){}[0]
    open fun initializerEnd(kotlin/String, kotlin/Any?) // app.cash.redwood.treehouse/EventListener.initializerEnd|initializerEnd(kotlin.String;kotlin.Any?){}[0]
    open fun initializerStart(kotlin/String): kotlin/Any? // app.cash.redwood.treehouse/EventListener.initializerStart|initializerStart(kotlin.String){}[0]
    open fun mainFunctionEnd(kotlin/String, kotlin/Any?) // app.cash.redwood.treehouse/EventListener.mainFunctionEnd|mainFunctionEnd(kotlin.String;kotlin.Any?){}[0]
    open fun mainFunctionStart(kotlin/String): kotlin/Any? // app.cash.redwood.treehouse/EventListener.mainFunctionStart|mainFunctionStart(kotlin.String){}[0]
    open fun manifestParseFailed(kotlin/Exception) // app.cash.redwood.treehouse/EventListener.manifestParseFailed|manifestParseFailed(kotlin.Exception){}[0]
    open fun manifestReady(app.cash.zipline/ZiplineManifest) // app.cash.redwood.treehouse/EventListener.manifestReady|manifestReady(app.cash.zipline.ZiplineManifest){}[0]
    open fun manifestVerified(app.cash.zipline/ZiplineManifest, kotlin/String) // app.cash.redwood.treehouse/EventListener.manifestVerified|manifestVerified(app.cash.zipline.ZiplineManifest;kotlin.String){}[0]
    open fun moduleLoadEnd(kotlin/String, kotlin/Any?) // app.cash.redwood.treehouse/EventListener.moduleLoadEnd|moduleLoadEnd(kotlin.String;kotlin.Any?){}[0]
    open fun moduleLoadStart(kotlin/String): kotlin/Any? // app.cash.redwood.treehouse/EventListener.moduleLoadStart|moduleLoadStart(kotlin.String){}[0]
    open fun serviceLeaked(kotlin/String) // app.cash.redwood.treehouse/EventListener.serviceLeaked|serviceLeaked(kotlin.String){}[0]
    open fun takeService(kotlin/String, app.cash.zipline/ZiplineService) // app.cash.redwood.treehouse/EventListener.takeService|takeService(kotlin.String;app.cash.zipline.ZiplineService){}[0]
    open fun uncaughtException(kotlin/Throwable) // app.cash.redwood.treehouse/EventListener.uncaughtException|uncaughtException(kotlin.Throwable){}[0]
    open fun unknownChildren(app.cash.redwood.protocol/WidgetTag, app.cash.redwood.protocol/ChildrenTag) // app.cash.redwood.treehouse/EventListener.unknownChildren|unknownChildren(app.cash.redwood.protocol.WidgetTag;app.cash.redwood.protocol.ChildrenTag){}[0]
    open fun unknownEvent(app.cash.redwood.protocol/WidgetTag, app.cash.redwood.protocol/EventTag) // app.cash.redwood.treehouse/EventListener.unknownEvent|unknownEvent(app.cash.redwood.protocol.WidgetTag;app.cash.redwood.protocol.EventTag){}[0]
    open fun unknownEventNode(app.cash.redwood.protocol/Id, app.cash.redwood.protocol/EventTag) // app.cash.redwood.treehouse/EventListener.unknownEventNode|unknownEventNode(app.cash.redwood.protocol.Id;app.cash.redwood.protocol.EventTag){}[0]
    open fun unknownModifier(app.cash.redwood.protocol/ModifierTag) // app.cash.redwood.treehouse/EventListener.unknownModifier|unknownModifier(app.cash.redwood.protocol.ModifierTag){}[0]
    open fun unknownProperty(app.cash.redwood.protocol/WidgetTag, app.cash.redwood.protocol/PropertyTag) // app.cash.redwood.treehouse/EventListener.unknownProperty|unknownProperty(app.cash.redwood.protocol.WidgetTag;app.cash.redwood.protocol.PropertyTag){}[0]
    open fun unknownWidget(app.cash.redwood.protocol/WidgetTag) // app.cash.redwood.treehouse/EventListener.unknownWidget|unknownWidget(app.cash.redwood.protocol.WidgetTag){}[0]
    open fun ziplineCreated(app.cash.zipline/Zipline) // app.cash.redwood.treehouse/EventListener.ziplineCreated|ziplineCreated(app.cash.zipline.Zipline){}[0]
}
// Targets: [ios]
final class app.cash.redwood.treehouse/TreehouseUIView : app.cash.redwood.treehouse/TreehouseView<platform.UIKit/UIView>, app.cash.redwood.widget/RedwoodUIView { // app.cash.redwood.treehouse/TreehouseUIView|null[0]
    constructor <init>(app.cash.redwood.treehouse/TreehouseView.WidgetSystem<platform.UIKit/UIView>) // app.cash.redwood.treehouse/TreehouseUIView.<init>|<init>(app.cash.redwood.treehouse.TreehouseView.WidgetSystem<platform.UIKit.UIView>){}[0]
    final val readyForContent // app.cash.redwood.treehouse/TreehouseUIView.readyForContent|{}readyForContent[0]
        final fun <get-readyForContent>(): kotlin/Boolean // app.cash.redwood.treehouse/TreehouseUIView.readyForContent.<get-readyForContent>|<get-readyForContent>(){}[0]
    final val widgetSystem // app.cash.redwood.treehouse/TreehouseUIView.widgetSystem|{}widgetSystem[0]
        final fun <get-widgetSystem>(): app.cash.redwood.treehouse/TreehouseView.WidgetSystem<platform.UIKit/UIView> // app.cash.redwood.treehouse/TreehouseUIView.widgetSystem.<get-widgetSystem>|<get-widgetSystem>(){}[0]
    final var readyForContentChangeListener // app.cash.redwood.treehouse/TreehouseUIView.readyForContentChangeListener|{}readyForContentChangeListener[0]
        final fun <get-readyForContentChangeListener>(): app.cash.redwood.treehouse/TreehouseView.ReadyForContentChangeListener<platform.UIKit/UIView>? // app.cash.redwood.treehouse/TreehouseUIView.readyForContentChangeListener.<get-readyForContentChangeListener>|<get-readyForContentChangeListener>(){}[0]
        final fun <set-readyForContentChangeListener>(app.cash.redwood.treehouse/TreehouseView.ReadyForContentChangeListener<platform.UIKit/UIView>?) // app.cash.redwood.treehouse/TreehouseUIView.readyForContentChangeListener.<set-readyForContentChangeListener>|<set-readyForContentChangeListener>(app.cash.redwood.treehouse.TreehouseView.ReadyForContentChangeListener<platform.UIKit.UIView>?){}[0]
    final var saveCallback // app.cash.redwood.treehouse/TreehouseUIView.saveCallback|{}saveCallback[0]
        final fun <get-saveCallback>(): app.cash.redwood.treehouse/TreehouseView.SaveCallback? // app.cash.redwood.treehouse/TreehouseUIView.saveCallback.<get-saveCallback>|<get-saveCallback>(){}[0]
        final fun <set-saveCallback>(app.cash.redwood.treehouse/TreehouseView.SaveCallback?) // app.cash.redwood.treehouse/TreehouseUIView.saveCallback.<set-saveCallback>|<set-saveCallback>(app.cash.redwood.treehouse.TreehouseView.SaveCallback?){}[0]
    final var stateSnapshotId // app.cash.redwood.treehouse/TreehouseUIView.stateSnapshotId|{}stateSnapshotId[0]
        final fun <get-stateSnapshotId>(): app.cash.redwood.treehouse/StateSnapshot.Id // app.cash.redwood.treehouse/TreehouseUIView.stateSnapshotId.<get-stateSnapshotId>|<get-stateSnapshotId>(){}[0]
        final fun <set-stateSnapshotId>(app.cash.redwood.treehouse/StateSnapshot.Id) // app.cash.redwood.treehouse/TreehouseUIView.stateSnapshotId.<set-stateSnapshotId>|<set-stateSnapshotId>(app.cash.redwood.treehouse.StateSnapshot.Id){}[0]
}
// Targets: [ios]
final fun app.cash.redwood.treehouse/TreehouseAppFactory(app.cash.zipline.loader/ZiplineHttpClient, app.cash.zipline.loader/ManifestVerifier, okio/Path? =..., okio/FileSystem? =..., kotlin/String =..., kotlin/Long =..., kotlin/Int =..., app.cash.redwood.treehouse/StateStore =...): app.cash.redwood.treehouse/TreehouseApp.Factory // app.cash.redwood.treehouse/TreehouseAppFactory|TreehouseAppFactory(app.cash.zipline.loader.ZiplineHttpClient;app.cash.zipline.loader.ManifestVerifier;okio.Path?;okio.FileSystem?;kotlin.String;kotlin.Long;kotlin.Int;app.cash.redwood.treehouse.StateStore){}[0]
