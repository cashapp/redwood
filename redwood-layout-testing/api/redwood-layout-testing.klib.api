// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, wasmJs]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <app.cash.redwood:redwood-layout-testing>
final class app.cash.redwood.layout.testing/BoxValue : app.cash.redwood.testing/WidgetValue { // app.cash.redwood.layout.testing/BoxValue|null[0]
    constructor <init>(app.cash.redwood/Modifier = ..., app.cash.redwood.layout.api/Constraint = ..., app.cash.redwood.layout.api/Constraint = ..., app.cash.redwood.ui/Margin = ..., app.cash.redwood.layout.api/CrossAxisAlignment = ..., app.cash.redwood.layout.api/CrossAxisAlignment = ..., kotlin.collections/List<app.cash.redwood.testing/WidgetValue> = ...) // app.cash.redwood.layout.testing/BoxValue.<init>|<init>(app.cash.redwood.Modifier;app.cash.redwood.layout.api.Constraint;app.cash.redwood.layout.api.Constraint;app.cash.redwood.ui.Margin;app.cash.redwood.layout.api.CrossAxisAlignment;app.cash.redwood.layout.api.CrossAxisAlignment;kotlin.collections.List<app.cash.redwood.testing.WidgetValue>){}[0]

    final val children // app.cash.redwood.layout.testing/BoxValue.children|{}children[0]
        final fun <get-children>(): kotlin.collections/List<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.layout.testing/BoxValue.children.<get-children>|<get-children>(){}[0]
    final val childrenLists // app.cash.redwood.layout.testing/BoxValue.childrenLists|{}childrenLists[0]
        final fun <get-childrenLists>(): kotlin.collections/List<kotlin.collections/List<app.cash.redwood.testing/WidgetValue>> // app.cash.redwood.layout.testing/BoxValue.childrenLists.<get-childrenLists>|<get-childrenLists>(){}[0]
    final val height // app.cash.redwood.layout.testing/BoxValue.height|{}height[0]
        final fun <get-height>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.layout.testing/BoxValue.height.<get-height>|<get-height>(){}[0]
    final val horizontalAlignment // app.cash.redwood.layout.testing/BoxValue.horizontalAlignment|{}horizontalAlignment[0]
        final fun <get-horizontalAlignment>(): app.cash.redwood.layout.api/CrossAxisAlignment // app.cash.redwood.layout.testing/BoxValue.horizontalAlignment.<get-horizontalAlignment>|<get-horizontalAlignment>(){}[0]
    final val margin // app.cash.redwood.layout.testing/BoxValue.margin|{}margin[0]
        final fun <get-margin>(): app.cash.redwood.ui/Margin // app.cash.redwood.layout.testing/BoxValue.margin.<get-margin>|<get-margin>(){}[0]
    final val modifier // app.cash.redwood.layout.testing/BoxValue.modifier|{}modifier[0]
        final fun <get-modifier>(): app.cash.redwood/Modifier // app.cash.redwood.layout.testing/BoxValue.modifier.<get-modifier>|<get-modifier>(){}[0]
    final val verticalAlignment // app.cash.redwood.layout.testing/BoxValue.verticalAlignment|{}verticalAlignment[0]
        final fun <get-verticalAlignment>(): app.cash.redwood.layout.api/CrossAxisAlignment // app.cash.redwood.layout.testing/BoxValue.verticalAlignment.<get-verticalAlignment>|<get-verticalAlignment>(){}[0]
    final val width // app.cash.redwood.layout.testing/BoxValue.width|{}width[0]
        final fun <get-width>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.layout.testing/BoxValue.width.<get-width>|<get-width>(){}[0]

    final fun <#A1: kotlin/Any> toWidget(app.cash.redwood.widget/WidgetSystem<#A1>): app.cash.redwood.widget/Widget<#A1> // app.cash.redwood.layout.testing/BoxValue.toWidget|toWidget(app.cash.redwood.widget.WidgetSystem<0:0>){0ยง<kotlin.Any>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.layout.testing/BoxValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.layout.testing/BoxValue.hashCode|hashCode(){}[0]
    final fun toDebugString(): kotlin/String // app.cash.redwood.layout.testing/BoxValue.toDebugString|toDebugString(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.layout.testing/BoxValue.toString|toString(){}[0]
}

final class app.cash.redwood.layout.testing/ColumnValue : app.cash.redwood.testing/WidgetValue { // app.cash.redwood.layout.testing/ColumnValue|null[0]
    constructor <init>(app.cash.redwood/Modifier = ..., app.cash.redwood.layout.api/Constraint = ..., app.cash.redwood.layout.api/Constraint = ..., app.cash.redwood.ui/Margin = ..., app.cash.redwood.layout.api/Overflow = ..., app.cash.redwood.layout.api/CrossAxisAlignment = ..., app.cash.redwood.layout.api/MainAxisAlignment = ..., kotlin/Function1<app.cash.redwood.ui/Px, kotlin/Unit>? = ..., kotlin.collections/List<app.cash.redwood.testing/WidgetValue> = ...) // app.cash.redwood.layout.testing/ColumnValue.<init>|<init>(app.cash.redwood.Modifier;app.cash.redwood.layout.api.Constraint;app.cash.redwood.layout.api.Constraint;app.cash.redwood.ui.Margin;app.cash.redwood.layout.api.Overflow;app.cash.redwood.layout.api.CrossAxisAlignment;app.cash.redwood.layout.api.MainAxisAlignment;kotlin.Function1<app.cash.redwood.ui.Px,kotlin.Unit>?;kotlin.collections.List<app.cash.redwood.testing.WidgetValue>){}[0]

    final val children // app.cash.redwood.layout.testing/ColumnValue.children|{}children[0]
        final fun <get-children>(): kotlin.collections/List<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.layout.testing/ColumnValue.children.<get-children>|<get-children>(){}[0]
    final val childrenLists // app.cash.redwood.layout.testing/ColumnValue.childrenLists|{}childrenLists[0]
        final fun <get-childrenLists>(): kotlin.collections/List<kotlin.collections/List<app.cash.redwood.testing/WidgetValue>> // app.cash.redwood.layout.testing/ColumnValue.childrenLists.<get-childrenLists>|<get-childrenLists>(){}[0]
    final val height // app.cash.redwood.layout.testing/ColumnValue.height|{}height[0]
        final fun <get-height>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.layout.testing/ColumnValue.height.<get-height>|<get-height>(){}[0]
    final val horizontalAlignment // app.cash.redwood.layout.testing/ColumnValue.horizontalAlignment|{}horizontalAlignment[0]
        final fun <get-horizontalAlignment>(): app.cash.redwood.layout.api/CrossAxisAlignment // app.cash.redwood.layout.testing/ColumnValue.horizontalAlignment.<get-horizontalAlignment>|<get-horizontalAlignment>(){}[0]
    final val margin // app.cash.redwood.layout.testing/ColumnValue.margin|{}margin[0]
        final fun <get-margin>(): app.cash.redwood.ui/Margin // app.cash.redwood.layout.testing/ColumnValue.margin.<get-margin>|<get-margin>(){}[0]
    final val modifier // app.cash.redwood.layout.testing/ColumnValue.modifier|{}modifier[0]
        final fun <get-modifier>(): app.cash.redwood/Modifier // app.cash.redwood.layout.testing/ColumnValue.modifier.<get-modifier>|<get-modifier>(){}[0]
    final val onScroll // app.cash.redwood.layout.testing/ColumnValue.onScroll|{}onScroll[0]
        final fun <get-onScroll>(): kotlin/Function1<app.cash.redwood.ui/Px, kotlin/Unit>? // app.cash.redwood.layout.testing/ColumnValue.onScroll.<get-onScroll>|<get-onScroll>(){}[0]
    final val overflow // app.cash.redwood.layout.testing/ColumnValue.overflow|{}overflow[0]
        final fun <get-overflow>(): app.cash.redwood.layout.api/Overflow // app.cash.redwood.layout.testing/ColumnValue.overflow.<get-overflow>|<get-overflow>(){}[0]
    final val verticalAlignment // app.cash.redwood.layout.testing/ColumnValue.verticalAlignment|{}verticalAlignment[0]
        final fun <get-verticalAlignment>(): app.cash.redwood.layout.api/MainAxisAlignment // app.cash.redwood.layout.testing/ColumnValue.verticalAlignment.<get-verticalAlignment>|<get-verticalAlignment>(){}[0]
    final val width // app.cash.redwood.layout.testing/ColumnValue.width|{}width[0]
        final fun <get-width>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.layout.testing/ColumnValue.width.<get-width>|<get-width>(){}[0]

    final fun <#A1: kotlin/Any> toWidget(app.cash.redwood.widget/WidgetSystem<#A1>): app.cash.redwood.widget/Widget<#A1> // app.cash.redwood.layout.testing/ColumnValue.toWidget|toWidget(app.cash.redwood.widget.WidgetSystem<0:0>){0ยง<kotlin.Any>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.layout.testing/ColumnValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.layout.testing/ColumnValue.hashCode|hashCode(){}[0]
    final fun toDebugString(): kotlin/String // app.cash.redwood.layout.testing/ColumnValue.toDebugString|toDebugString(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.layout.testing/ColumnValue.toString|toString(){}[0]
}

final class app.cash.redwood.layout.testing/RedwoodLayoutTestingWidgetFactory : app.cash.redwood.layout.widget/RedwoodLayoutWidgetFactory<app.cash.redwood.testing/WidgetValue> { // app.cash.redwood.layout.testing/RedwoodLayoutTestingWidgetFactory|null[0]
    constructor <init>() // app.cash.redwood.layout.testing/RedwoodLayoutTestingWidgetFactory.<init>|<init>(){}[0]

    final fun Box(): app.cash.redwood.layout.widget/Box<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.layout.testing/RedwoodLayoutTestingWidgetFactory.Box|Box(){}[0]
    final fun Column(): app.cash.redwood.layout.widget/Column<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.layout.testing/RedwoodLayoutTestingWidgetFactory.Column|Column(){}[0]
    final fun Row(): app.cash.redwood.layout.widget/Row<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.layout.testing/RedwoodLayoutTestingWidgetFactory.Row|Row(){}[0]
    final fun Spacer(): app.cash.redwood.layout.widget/Spacer<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.layout.testing/RedwoodLayoutTestingWidgetFactory.Spacer|Spacer(){}[0]
}

final class app.cash.redwood.layout.testing/RowValue : app.cash.redwood.testing/WidgetValue { // app.cash.redwood.layout.testing/RowValue|null[0]
    constructor <init>(app.cash.redwood/Modifier = ..., app.cash.redwood.layout.api/Constraint = ..., app.cash.redwood.layout.api/Constraint = ..., app.cash.redwood.ui/Margin = ..., app.cash.redwood.layout.api/Overflow = ..., app.cash.redwood.layout.api/MainAxisAlignment = ..., app.cash.redwood.layout.api/CrossAxisAlignment = ..., kotlin/Function1<app.cash.redwood.ui/Px, kotlin/Unit>? = ..., kotlin.collections/List<app.cash.redwood.testing/WidgetValue> = ...) // app.cash.redwood.layout.testing/RowValue.<init>|<init>(app.cash.redwood.Modifier;app.cash.redwood.layout.api.Constraint;app.cash.redwood.layout.api.Constraint;app.cash.redwood.ui.Margin;app.cash.redwood.layout.api.Overflow;app.cash.redwood.layout.api.MainAxisAlignment;app.cash.redwood.layout.api.CrossAxisAlignment;kotlin.Function1<app.cash.redwood.ui.Px,kotlin.Unit>?;kotlin.collections.List<app.cash.redwood.testing.WidgetValue>){}[0]

    final val children // app.cash.redwood.layout.testing/RowValue.children|{}children[0]
        final fun <get-children>(): kotlin.collections/List<app.cash.redwood.testing/WidgetValue> // app.cash.redwood.layout.testing/RowValue.children.<get-children>|<get-children>(){}[0]
    final val childrenLists // app.cash.redwood.layout.testing/RowValue.childrenLists|{}childrenLists[0]
        final fun <get-childrenLists>(): kotlin.collections/List<kotlin.collections/List<app.cash.redwood.testing/WidgetValue>> // app.cash.redwood.layout.testing/RowValue.childrenLists.<get-childrenLists>|<get-childrenLists>(){}[0]
    final val height // app.cash.redwood.layout.testing/RowValue.height|{}height[0]
        final fun <get-height>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.layout.testing/RowValue.height.<get-height>|<get-height>(){}[0]
    final val horizontalAlignment // app.cash.redwood.layout.testing/RowValue.horizontalAlignment|{}horizontalAlignment[0]
        final fun <get-horizontalAlignment>(): app.cash.redwood.layout.api/MainAxisAlignment // app.cash.redwood.layout.testing/RowValue.horizontalAlignment.<get-horizontalAlignment>|<get-horizontalAlignment>(){}[0]
    final val margin // app.cash.redwood.layout.testing/RowValue.margin|{}margin[0]
        final fun <get-margin>(): app.cash.redwood.ui/Margin // app.cash.redwood.layout.testing/RowValue.margin.<get-margin>|<get-margin>(){}[0]
    final val modifier // app.cash.redwood.layout.testing/RowValue.modifier|{}modifier[0]
        final fun <get-modifier>(): app.cash.redwood/Modifier // app.cash.redwood.layout.testing/RowValue.modifier.<get-modifier>|<get-modifier>(){}[0]
    final val onScroll // app.cash.redwood.layout.testing/RowValue.onScroll|{}onScroll[0]
        final fun <get-onScroll>(): kotlin/Function1<app.cash.redwood.ui/Px, kotlin/Unit>? // app.cash.redwood.layout.testing/RowValue.onScroll.<get-onScroll>|<get-onScroll>(){}[0]
    final val overflow // app.cash.redwood.layout.testing/RowValue.overflow|{}overflow[0]
        final fun <get-overflow>(): app.cash.redwood.layout.api/Overflow // app.cash.redwood.layout.testing/RowValue.overflow.<get-overflow>|<get-overflow>(){}[0]
    final val verticalAlignment // app.cash.redwood.layout.testing/RowValue.verticalAlignment|{}verticalAlignment[0]
        final fun <get-verticalAlignment>(): app.cash.redwood.layout.api/CrossAxisAlignment // app.cash.redwood.layout.testing/RowValue.verticalAlignment.<get-verticalAlignment>|<get-verticalAlignment>(){}[0]
    final val width // app.cash.redwood.layout.testing/RowValue.width|{}width[0]
        final fun <get-width>(): app.cash.redwood.layout.api/Constraint // app.cash.redwood.layout.testing/RowValue.width.<get-width>|<get-width>(){}[0]

    final fun <#A1: kotlin/Any> toWidget(app.cash.redwood.widget/WidgetSystem<#A1>): app.cash.redwood.widget/Widget<#A1> // app.cash.redwood.layout.testing/RowValue.toWidget|toWidget(app.cash.redwood.widget.WidgetSystem<0:0>){0ยง<kotlin.Any>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.layout.testing/RowValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.layout.testing/RowValue.hashCode|hashCode(){}[0]
    final fun toDebugString(): kotlin/String // app.cash.redwood.layout.testing/RowValue.toDebugString|toDebugString(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.layout.testing/RowValue.toString|toString(){}[0]
}

final class app.cash.redwood.layout.testing/SpacerValue : app.cash.redwood.testing/WidgetValue { // app.cash.redwood.layout.testing/SpacerValue|null[0]
    constructor <init>(app.cash.redwood/Modifier = ..., app.cash.redwood.ui/Dp = ..., app.cash.redwood.ui/Dp = ...) // app.cash.redwood.layout.testing/SpacerValue.<init>|<init>(app.cash.redwood.Modifier;app.cash.redwood.ui.Dp;app.cash.redwood.ui.Dp){}[0]

    final val childrenLists // app.cash.redwood.layout.testing/SpacerValue.childrenLists|{}childrenLists[0]
        final fun <get-childrenLists>(): kotlin.collections/List<kotlin.collections/List<app.cash.redwood.testing/WidgetValue>> // app.cash.redwood.layout.testing/SpacerValue.childrenLists.<get-childrenLists>|<get-childrenLists>(){}[0]
    final val height // app.cash.redwood.layout.testing/SpacerValue.height|{}height[0]
        final fun <get-height>(): app.cash.redwood.ui/Dp // app.cash.redwood.layout.testing/SpacerValue.height.<get-height>|<get-height>(){}[0]
    final val modifier // app.cash.redwood.layout.testing/SpacerValue.modifier|{}modifier[0]
        final fun <get-modifier>(): app.cash.redwood/Modifier // app.cash.redwood.layout.testing/SpacerValue.modifier.<get-modifier>|<get-modifier>(){}[0]
    final val width // app.cash.redwood.layout.testing/SpacerValue.width|{}width[0]
        final fun <get-width>(): app.cash.redwood.ui/Dp // app.cash.redwood.layout.testing/SpacerValue.width.<get-width>|<get-width>(){}[0]

    final fun <#A1: kotlin/Any> toWidget(app.cash.redwood.widget/WidgetSystem<#A1>): app.cash.redwood.widget/Widget<#A1> // app.cash.redwood.layout.testing/SpacerValue.toWidget|toWidget(app.cash.redwood.widget.WidgetSystem<0:0>){0ยง<kotlin.Any>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.layout.testing/SpacerValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.layout.testing/SpacerValue.hashCode|hashCode(){}[0]
    final fun toDebugString(): kotlin/String // app.cash.redwood.layout.testing/SpacerValue.toDebugString|toDebugString(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.layout.testing/SpacerValue.toString|toString(){}[0]
}

final suspend fun <#A: kotlin/Any?> app.cash.redwood.layout.testing/RedwoodLayoutTester(app.cash.redwood.ui/OnBackPressedDispatcher = ..., app.cash.redwood.testing/TestSavedState? = ..., app.cash.redwood.ui/UiConfiguration = ..., kotlin.coroutines/SuspendFunction1<app.cash.redwood.testing/TestRedwoodComposition<kotlin.collections/List<app.cash.redwood.testing/WidgetValue>>, #A>): #A // app.cash.redwood.layout.testing/RedwoodLayoutTester|RedwoodLayoutTester(app.cash.redwood.ui.OnBackPressedDispatcher;app.cash.redwood.testing.TestSavedState?;app.cash.redwood.ui.UiConfiguration;kotlin.coroutines.SuspendFunction1<app.cash.redwood.testing.TestRedwoodComposition<kotlin.collections.List<app.cash.redwood.testing.WidgetValue>>,0:0>){0ยง<kotlin.Any?>}[0]
