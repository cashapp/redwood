import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget
import org.jetbrains.kotlin.gradle.plugin.mpp.NativeBuildType

buildscript {
  dependencies {
    classpath libs.kotlin.gradlePlugin
    classpath libs.kotlin.serializationPlugin
    classpath libs.jetbrains.compose.gradlePlugin
    classpath libs.atomicFuPlugin
    classpath libs.androidGradlePlugin
    classpath libs.gradleMavenPublishPlugin
    classpath libs.dokkaPlugin
    classpath libs.spotlessPlugin
    classpath libs.buildConfigPlugin
    classpath libs.zipline.gradlePlugin
    classpath libs.paparazzi.gradlePlugin
    classpath 'app.cash.redwood.build:gradle-plugin'
    classpath 'app.cash.redwood:redwood-gradle-plugin'
  }
  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }
}

apply plugin: 'org.jetbrains.dokka'

allprojects {
  tasks.withType(AbstractTestTask).configureEach {
    testLogging {
      if (System.getenv("CI") == "true") {
        events = ["failed", "skipped", "passed"]
      }
      exceptionFormat "full"
    }
    // Force tests to always run to avoid caching issues.
    outputs.upToDateWhen { false }
  }

  plugins.withId('org.jetbrains.kotlin.multiplatform') {
    kotlin {
      sourceSets {
        all {
          languageSettings.optIn('kotlin.experimental.ExperimentalObjCName')
        }
      }
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach {
    compilerOptions {
      freeCompilerArgs.addAll([
        '-progressive', // https://kotlinlang.org/docs/whatsnew13.html#progressive-mode
      ])
    }
  }

  tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_1_8.toString()
    targetCompatibility = JavaVersion.VERSION_1_8.toString()
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile).configureEach {
    compilerOptions {
      jvmTarget.set(JvmTarget.JVM_1_8)
      freeCompilerArgs.addAll([
        '-Xjvm-default=all',
      ])
    }
  }

  // Workaround for https://github.com/Kotlin/dokka/issues/2977.
  // We disable the C Interop IDE metadata task when generating documentation using Dokka.
  gradle.taskGraph.whenReady {
    def hasDokkaTasks = gradle.taskGraph.allTasks.any {
      it instanceof org.jetbrains.dokka.gradle.AbstractDokkaTask
    }
    if (hasDokkaTasks) {
      tasks.withType(
        org.jetbrains.kotlin.gradle.targets.native.internal.CInteropMetadataDependencyTransformationTask
      ).configureEach {
        enabled = false
      }
    }
  }

  // Disable the release linking tasks because we never need it for iOS sample applications.
  // TODO Switch to https://youtrack.jetbrains.com/issue/KT-54424 when it is supported.
  plugins.withId('org.jetbrains.kotlin.multiplatform') {
    kotlin {
      targets.withType(KotlinNativeTarget) {
        binaries.all {
          if (it.buildType == NativeBuildType.RELEASE) {
            it.linkTask.enabled = false
          }
        }
        binaries.withType(org.jetbrains.kotlin.gradle.plugin.mpp.Framework) {
          linkerOpts += "-lsqlite3"
        }
      }
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask).configureEach {
      if (it.name.contains("Release")) {
        it.enabled = false
      }
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach {
    project.android {
      compileSdk 33
      compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
      }
      defaultConfig {
        minSdk 21
        targetSdk 33
      }
      lint {
        checkDependencies true
        checkReleaseBuilds false // Full lint runs as part of 'build' task.
      }
    }
    android.composeOptions {
      kotlinCompilerExtensionVersion libs.androidx.compose.compiler.get().version
    }
  }

  plugins.withId('org.jetbrains.compose') {
    project.compose {
      kotlinCompilerPlugin = libs.jetbrains.compose.compiler.get().version
    }
  }

  // Disable the release build type because we never need it for sample applications.
  plugins.withId('com.android.application') {
    project.android {
      variantFilter { variant ->
        if (variant.buildType.name == 'release') {
          variant.ignore = true
        }
      }
    }
  }
}

afterEvaluate {
  spotless {
    kotlin {
      targetExclude(
        // Apache 2-licensed files from AOSP.
        "build-support/src/main/resources/app/cash/redwood/buildsupport/composeHelpers.kt",
      )
    }
  }
}
