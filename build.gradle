import com.vanniktech.maven.publish.SonatypeHost
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget
import org.jetbrains.kotlin.gradle.plugin.mpp.NativeBuildType

buildscript {
  dependencies {
    classpath libs.kotlin.gradlePlugin
    classpath libs.kotlin.serializationPlugin
    classpath libs.jetbrains.compose.gradlePlugin
    classpath libs.androidGradlePlugin
    classpath libs.gradleMavenPublishPlugin
    classpath libs.dokkaPlugin
    classpath libs.spotlessPlugin
    classpath libs.buildConfigPlugin
    classpath libs.zipline.gradlePlugin
    classpath libs.paparazzi.gradlePlugin
    classpath 'app.cash.redwood.build:gradle-plugin'
    classpath 'app.cash.redwood:redwood-gradle-plugin'
  }
  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }
}

apply plugin: 'org.jetbrains.dokka'

allprojects {
  repositories {
    mavenCentral()
    google()
  }

  group = project.property("GROUP") as String
  version = project.property("VERSION_NAME") as String

  tasks.withType(AbstractTestTask).configureEach {
    testLogging {
      if (System.getenv("CI") == "true") {
        events = ["failed", "skipped", "passed"]
      }
      exceptionFormat "full"
    }
    // Force tests to always run to avoid caching issues.
    outputs.upToDateWhen { false }
  }

  plugins.withId('java-base') {
    java {
      sourceCompatibility = JavaVersion.VERSION_11
      targetCompatibility = JavaVersion.VERSION_11
    }
  }

  plugins.withId('com.vanniktech.maven.publish') {
    mavenPublishing {
      publishToMavenCentral(SonatypeHost.DEFAULT)
      if (providers.systemProperty("RELEASE_SIGNING_ENABLED").getOrElse("true").toBoolean()) {
        signAllPublications()
      }
    }
  }

  // List of Redwood modules that aren't published.
  def privateApiModules = [
    ":redwood-layout-shared-test"
  ]

  if (project.path.startsWith(':redwood-') && !privateApiModules.contains(project.path)) {
    plugins.withId('org.jetbrains.kotlin.multiplatform') {
      kotlin {
        explicitApi()
      }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { task ->
      // Only enable strict mode for non-test sources.
      if (!task.name.toLowerCase().contains('test')) {
        compilerOptions {
          freeCompilerArgs.addAll([
            '-Xexplicit-api=strict',
          ])
        }
      }
    }
  }

  plugins.withId('org.jetbrains.kotlin.multiplatform') {
    kotlin {
      sourceSets {
        all {
          languageSettings.optIn('kotlin.experimental.ExperimentalObjCName')
        }
      }
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach {
    compilerOptions {
      freeCompilerArgs.addAll([
        '-progressive', // https://kotlinlang.org/docs/whatsnew13.html#progressive-mode
      ])
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile).configureEach {
    compilerOptions {
      jvmTarget.set(JvmTarget.JVM_1_8)
      freeCompilerArgs.addAll([
        '-Xjvm-default=all',
      ])
    }
  }

  // DokkaTaskPartial configures subprojects for multimodule docs
  // All options: https://kotlinlang.org/docs/dokka-gradle.html#configuration-options
  tasks.withType(org.jetbrains.dokka.gradle.DokkaTaskPartial) {
    dokkaSourceSets.configureEach {
      suppressGeneratedFiles.set(false) // document generated code
    }
  }

  // Disable the release linking tasks because we never need it for iOS sample applications.
  // TODO Switch to https://youtrack.jetbrains.com/issue/KT-54424 when it is supported.
  plugins.withId('org.jetbrains.kotlin.multiplatform') {
    kotlin {
      targets.withType(KotlinNativeTarget) {
        binaries.all {
          if (it.buildType == NativeBuildType.RELEASE) {
            it.linkTask.enabled = false
          }
        }
        binaries.withType(org.jetbrains.kotlin.gradle.plugin.mpp.Framework) {
          linkerOpts += "-lsqlite3"
        }
      }
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask).configureEach {
      if (it.name.contains("Release")) {
        it.enabled = false
      }
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach {
    project.android {
      compileSdk 33
      compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
      }
      defaultConfig {
        minSdk 21
        targetSdk 33
      }
      lint {
        checkDependencies true
        checkReleaseBuilds false // Full lint runs as part of 'build' task.
      }
    }
    android.composeOptions {
      kotlinCompilerExtensionVersion libs.versions.androidxComposeCompiler.get()
    }
  }

  // Disable the release build type because we never need it for sample applications.
  plugins.withId('com.android.application') {
    project.android {
      variantFilter { variant ->
        if (variant.buildType.name == 'release') {
          variant.ignore = true
        }
      }
    }
  }

  plugins.withId('maven-publish') {
    publishing {
      repositories {
        maven {
          name = "LocalMaven"
          url = file("${rootProject.buildDir}/localMaven").toURI().toString()
        }

        /**
         * Want to push to an internal repository for testing?
         * Set the following properties in ~/.gradle/gradle.properties.
         *
         * internalUrl=YOUR_INTERNAL_URL
         * internalUsername=YOUR_USERNAME
         * internalPassword=YOUR_PASSWORD
         *
         * Then run the following command to publish a new internal release:
         *
         * ./gradlew publishAllPublicationsToInternalRepository -DRELEASE_SIGNING_ENABLED=false
         */
        def internalUrl = providers.gradleProperty("internalUrl")
        if (internalUrl.isPresent()) {
          maven {
            name = "internal"
            url = internalUrl
            credentials {
              username = providers.gradleProperty("internalUsername").get()
              password = providers.gradleProperty("internalPassword").get()
            }
          }
        }
      }
    }
  }

  apply plugin: 'com.diffplug.spotless'
  spotless {
    kotlin {
      target("src/*/kotlin/**/*.kt")
      ktlint('0.48.1').editorConfigOverride([
        'ktlint_standard_filename': 'disabled',
      ])
      licenseHeaderFile(rootProject.file('gradle/license-header.txt'))
    }
  }
}
