buildscript {
  ext.versions = [
    'kotlin': '1.4.21',
    'kotlinx': [
      'coroutines': '1.4.1',
      'serialization': '1.0.0',
    ],
    'ktor': '1.4.1',
    'exhaustive': '0.1.1',
    'compose': '1.0.0-alpha09',
  ]

  ext.deps = [
    'composeCompiler': "androidx.compose.compiler:compiler:${versions.compose}",
    'kotlin': [
      'gradlePlugin': "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
      'reflect': 'org.jetbrains.kotlin:kotlin-reflect',
    ],
    'kotlinx': [
      'coroutines': [
        'android': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinx.coroutines}",
        'core': "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinx.coroutines}",
      ],
      'serialization': [
        'core': "org.jetbrains.kotlinx:kotlinx-serialization-core:${versions.kotlinx.serialization}",
        'json': "org.jetbrains.kotlinx:kotlinx-serialization-json:${versions.kotlinx.serialization}",
      ],
    ],
    'ktor': [
      'client': [
        'core': "io.ktor:ktor-client-core:${versions.ktor}",
      ],
      'server': [
        'core': "io.ktor:ktor-server-core:${versions.ktor}",
        'netty': "io.ktor:ktor-server-netty:${versions.ktor}",
        'webSockets': "io.ktor:ktor-websockets:${versions.ktor}",
      ],
    ],
    'logbackClassic': 'ch.qos.logback:logback-classic:1.2.3',
    'kotlinPoet': 'com.squareup:kotlinpoet:1.7.2',
    'clikt': 'com.github.ajalt.clikt:clikt:3.1.0',
    'exhaustiveAnnotation': "app.cash.exhaustive:exhaustive-annotation:${versions.exhaustive}",
    'junit': 'junit:junit:4.13.1',
    'truth': 'com.google.truth:truth:1.1',
  ]

  dependencies {
    classpath deps.kotlin.gradlePlugin
    classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"
    classpath 'com.android.tools.build:gradle:4.0.2'
    classpath "app.cash.exhaustive:exhaustive-gradle:${versions.exhaustive}"
    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.13.0'
    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.4.10.2'
  }
  repositories {
    mavenCentral()
    google()
    jcenter()
  }
}

subprojects { subproject ->
  repositories {
    mavenCentral()
    google()
    maven {
      url 'https://kotlin.bintray.com/kotlinx'
    }
    jcenter()
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { task ->
    // TODO: figure out why we can't add these options on iOS builds.
    if (subproject.name != "treehouse-display"
        && subproject.name != "treehouse-protocol") {
      task.kotlinOptions {
        freeCompilerArgs += [
          '-progressive',
          '-Xopt-in=kotlin.RequiresOptIn',
          '-Xopt-in=androidx.compose.runtime.ExperimentalComposeApi',
        ]
      }
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach {
    kotlinOptions {
      jvmTarget = '1.8'
      useIR = true
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
    def android = plugin.extension
    android.compileSdkVersion 30
    android.defaultConfig {
      minSdkVersion 21
      targetSdkVersion 30
    }
    android.lintOptions {
      checkDependencies true
      checkReleaseBuilds false // Full lint runs as part of 'build' task.
    }
  }

  plugins.withId('com.vanniktech.maven.publish') {
    mavenPublish {
      targets {
        installArchives {
          def url = file("${rootProject.buildDir}/localMaven").toURI().toString()
          releaseRepositoryUrl = url
          snapshotRepositoryUrl = url
        }
      }
    }
  }
}
