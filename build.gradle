buildscript {
  dependencies {
    classpath libs.kotlin.gradlePlugin
    classpath libs.kotlin.serializationPlugin
    classpath libs.androidGradlePlugin
    classpath libs.gradleMavenPublishPlugin
    classpath libs.dokkaPlugin
    classpath libs.spotlessPlugin
    classpath libs.buildConfigPlugin
    classpath libs.zipline.gradlePlugin
    classpath 'app.cash.redwood.build:gradle-plugin'
  }
  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
    maven {
      url 'https://maven.pkg.jetbrains.space/public/p/compose/dev'
    }
  }
}

apply plugin: 'org.jetbrains.dokka'

allprojects {
  repositories {
    mavenCentral()
    google()
    maven {
      url 'https://maven.pkg.jetbrains.space/public/p/compose/dev'
    }
  }

  tasks.withType(Test).configureEach {
    testLogging {
      if (System.getenv("CI") == "true") {
        events = ["failed", "skipped", "passed"]
      }
      exceptionFormat "full"
    }
  }

  plugins.withId('java-base') {
    java {
      sourceCompatibility = JavaVersion.VERSION_11
      targetCompatibility = JavaVersion.VERSION_11
    }
  }

  plugins.withId('org.jetbrains.kotlin.jvm') {
    kotlin {
      if (project.path.startsWith(':redwood-')) {
        explicitApi()
      }
    }
  }

  plugins.withId('org.jetbrains.kotlin.multiplatform') {
    kotlin {
      if (project.path.startsWith(':redwood-')) {
        explicitApi()
      }
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach { task ->
    task.kotlinOptions {
      freeCompilerArgs += [
        '-progressive', // https://kotlinlang.org/docs/whatsnew13.html#progressive-mode
      ]
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach { task ->
    task.kotlinOptions {
      jvmTarget = '1.8'
      freeCompilerArgs += [
        '-Xjvm-default=all',
      ]
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
    def android = plugin.extension
    android.compileSdkVersion 32
    android.compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
    }
    android.defaultConfig {
      minSdkVersion 21
      targetSdkVersion 30
    }
    android.lintOptions {
      checkDependencies true
      checkReleaseBuilds false // Full lint runs as part of 'build' task.
    }
  }

  plugins.withId('com.vanniktech.maven.publish.base') {
    group = project.property("GROUP") as String
    version = project.property("VERSION_NAME") as String

    publishing {
      repositories {
        maven {
          name = "LocalMaven"
          url = file("${rootProject.buildDir}/localMaven").toURI().toString()
        }
      }
    }
  }

  if (!project.path.startsWith(':compose:')) {
    apply plugin: 'com.diffplug.spotless'

    spotless {
      kotlin {
        target("src/*/kotlin/**/*.kt")
        licenseHeaderFile(rootProject.file('gradle/license-header.txt'))
        // Spotless doesn't read .editorconfig yet: https://github.com/diffplug/spotless/issues/142
        ktlint('0.46.1').editorConfigOverride([
          'disabled_rules': 'filename',
          'insert_final_newline': 'true',
          'end_of_line': 'lf',
          'charset': 'utf-8',
          'indent_size': '2',
          'ij_kotlin_allow_trailing_comma': 'true',
          'ij_kotlin_allow_trailing_comma_on_call_site': 'true',
          'ij_kotlin_imports_layout': '*',
        ])
      }
    }
  }
}
