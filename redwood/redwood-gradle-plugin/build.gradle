apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'app.cash.exhaustive'
apply plugin: 'com.vanniktech.maven.publish'

dependencies {
  compileOnly gradleApi()
  compileOnly deps.kotlin.gradlePlugin

  testImplementation deps.junit
  testImplementation deps.testParameterInjector
  testImplementation deps.truth
  testImplementation gradleTestKit()
}

gradlePlugin {
  plugins {
    redwood {
      id = "app.cash.redwood"
      displayName = "Redwood"
      description = "Redwood client Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodPlugin"
    }
    redwoodSchema {
      id = "app.cash.redwood.schema"
      displayName = "Redwood schema"
      description = "Redwood schema Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodSchemaPlugin"
    }
    redwoodSchemaCompose {
      id = "app.cash.redwood.schema.compose"
      displayName = "Redwood schema (Compose generator)"
      description = "Redwood schema Compose code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodSchemaComposePlugin"
    }
    redwoodSchemaComposeProtocol {
      id = "app.cash.redwood.schema.compose.protocol"
      displayName = "Redwood schema (Compose protocolgenerator)"
      description = "Redwood schema Compose protocol code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodSchemaComposeProtocolPlugin"
    }
    redwoodSchemaTest {
      id = "app.cash.redwood.schema.test"
      displayName = "Redwood schema (test generator)"
      description = "Redwood schema test code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodSchemaTestPlugin"
    }
    redwoodSchemaWidget {
      id = "app.cash.redwood.schema.widget"
      displayName = "Redwood schema (widget generator)"
      description = "Redwood schema widget code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodSchemaWidgetPlugin"
    }
    redwoodSchemaWidgetProtocol {
      id = "app.cash.redwood.schema.widget.protocol"
      displayName = "Redwood schema (widget protocol generator)"
      description = "Redwood schema widget protocol code generation Gradle plugin"
      implementationClass = "app.cash.redwood.gradle.RedwoodSchemaWidgetProtocolPlugin"
    }
  }
}

test {
  dependsOn(':compose:compiler-hosted:installArchives')
  dependsOn(':compose:runtime:installArchives')
  dependsOn(':redwood-compose:installArchives')
  dependsOn(':redwood-gradle-plugin:installArchives')
  dependsOn(':redwood-protocol:installArchives')
  dependsOn(':redwood-protocol-compose:installArchives')
  dependsOn(':redwood-protocol-widget:installArchives')
  dependsOn(':redwood-schema:installArchives')
  dependsOn(':redwood-schema-generator:installArchives')
  dependsOn(':redwood-schema-annotations:installArchives')
  dependsOn(':redwood-widget:installArchives')
}

def versionDirectory = "$buildDir/generated/version/"

sourceSets {
  main.java.srcDir versionDirectory
}

task pluginVersion {
  def outputDir = file(versionDirectory)

  inputs.property 'composeVersion', versions.compose
  inputs.property 'redwoodVersion', project.version
  outputs.dir outputDir

  doLast {
    def versionFile = file("$outputDir/app/cash/redwood/gradle/version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package app.cash.redwood.gradle

internal const val composeVersion = "${versions.compose}"
internal const val redwoodVersion = "${project.version}"
"""
  }
}

tasks.getByName('compileKotlin').dependsOn('pluginVersion')
