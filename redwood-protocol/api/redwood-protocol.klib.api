// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <app.cash.redwood:redwood-protocol>
abstract fun interface app.cash.redwood.protocol/ChangesSink { // app.cash.redwood.protocol/ChangesSink|null[0]
    abstract fun sendChanges(kotlin.collections/List<app.cash.redwood.protocol/Change>) // app.cash.redwood.protocol/ChangesSink.sendChanges|sendChanges(kotlin.collections.List<app.cash.redwood.protocol.Change>){}[0]
}
abstract fun interface app.cash.redwood.protocol/EventSink { // app.cash.redwood.protocol/EventSink|null[0]
    abstract fun sendEvent(app.cash.redwood.protocol/Event) // app.cash.redwood.protocol/EventSink.sendEvent|sendEvent(app.cash.redwood.protocol.Event){}[0]
}
final class app.cash.redwood.protocol/Create : app.cash.redwood.protocol/Change { // app.cash.redwood.protocol/Create|null[0]
    constructor <init>(app.cash.redwood.protocol/Id, app.cash.redwood.protocol/WidgetTag) // app.cash.redwood.protocol/Create.<init>|<init>(app.cash.redwood.protocol.Id;app.cash.redwood.protocol.WidgetTag){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/Create.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/Create.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/Create.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/Create> { // app.cash.redwood.protocol/Create.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/Create.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/Create // app.cash.redwood.protocol/Create.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/Create) // app.cash.redwood.protocol/Create.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.Create){}[0]
        final val descriptor // app.cash.redwood.protocol/Create.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/Create.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/Create.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/Create> // app.cash.redwood.protocol/Create.Companion.serializer|serializer(){}[0]
    }
    final val id // app.cash.redwood.protocol/Create.id|{}id[0]
        final fun <get-id>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/Create.id.<get-id>|<get-id>(){}[0]
    final val tag // app.cash.redwood.protocol/Create.tag|{}tag[0]
        final fun <get-tag>(): app.cash.redwood.protocol/WidgetTag // app.cash.redwood.protocol/Create.tag.<get-tag>|<get-tag>(){}[0]
}
final class app.cash.redwood.protocol/Event { // app.cash.redwood.protocol/Event|null[0]
    constructor <init>(app.cash.redwood.protocol/Id, app.cash.redwood.protocol/EventTag, kotlin.collections/List<kotlinx.serialization.json/JsonElement> = ...) // app.cash.redwood.protocol/Event.<init>|<init>(app.cash.redwood.protocol.Id;app.cash.redwood.protocol.EventTag;kotlin.collections.List<kotlinx.serialization.json.JsonElement>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/Event.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/Event.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/Event.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/Event> { // app.cash.redwood.protocol/Event.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/Event.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/Event // app.cash.redwood.protocol/Event.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/Event) // app.cash.redwood.protocol/Event.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.Event){}[0]
        final val descriptor // app.cash.redwood.protocol/Event.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/Event.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/Event.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/Event> // app.cash.redwood.protocol/Event.Companion.serializer|serializer(){}[0]
        final val $childSerializers // app.cash.redwood.protocol/Event.Companion.$childSerializers|{}$childSerializers[0]
    }
    final val args // app.cash.redwood.protocol/Event.args|{}args[0]
        final fun <get-args>(): kotlin.collections/List<kotlinx.serialization.json/JsonElement> // app.cash.redwood.protocol/Event.args.<get-args>|<get-args>(){}[0]
    final val id // app.cash.redwood.protocol/Event.id|{}id[0]
        final fun <get-id>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/Event.id.<get-id>|<get-id>(){}[0]
    final val tag // app.cash.redwood.protocol/Event.tag|{}tag[0]
        final fun <get-tag>(): app.cash.redwood.protocol/EventTag // app.cash.redwood.protocol/Event.tag.<get-tag>|<get-tag>(){}[0]
}
final class app.cash.redwood.protocol/ModifierChange : app.cash.redwood.protocol/ValueChange { // app.cash.redwood.protocol/ModifierChange|null[0]
    constructor <init>(app.cash.redwood.protocol/Id, kotlin.collections/List<app.cash.redwood.protocol/ModifierElement> = ...) // app.cash.redwood.protocol/ModifierChange.<init>|<init>(app.cash.redwood.protocol.Id;kotlin.collections.List<app.cash.redwood.protocol.ModifierElement>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/ModifierChange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/ModifierChange.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/ModifierChange.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/ModifierChange> { // app.cash.redwood.protocol/ModifierChange.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/ModifierChange.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/ModifierChange // app.cash.redwood.protocol/ModifierChange.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/ModifierChange) // app.cash.redwood.protocol/ModifierChange.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.ModifierChange){}[0]
        final val descriptor // app.cash.redwood.protocol/ModifierChange.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/ModifierChange.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/ModifierChange.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/ModifierChange> // app.cash.redwood.protocol/ModifierChange.Companion.serializer|serializer(){}[0]
        final val $childSerializers // app.cash.redwood.protocol/ModifierChange.Companion.$childSerializers|{}$childSerializers[0]
    }
    final val elements // app.cash.redwood.protocol/ModifierChange.elements|{}elements[0]
        final fun <get-elements>(): kotlin.collections/List<app.cash.redwood.protocol/ModifierElement> // app.cash.redwood.protocol/ModifierChange.elements.<get-elements>|<get-elements>(){}[0]
    final val id // app.cash.redwood.protocol/ModifierChange.id|{}id[0]
        final fun <get-id>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/ModifierChange.id.<get-id>|<get-id>(){}[0]
}
final class app.cash.redwood.protocol/ModifierElement { // app.cash.redwood.protocol/ModifierElement|null[0]
    constructor <init>(app.cash.redwood.protocol/ModifierTag, kotlinx.serialization.json/JsonElement = ...) // app.cash.redwood.protocol/ModifierElement.<init>|<init>(app.cash.redwood.protocol.ModifierTag;kotlinx.serialization.json.JsonElement){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/ModifierElement.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/ModifierElement.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/ModifierElement.toString|toString(){}[0]
    final val tag // app.cash.redwood.protocol/ModifierElement.tag|{}tag[0]
        final fun <get-tag>(): app.cash.redwood.protocol/ModifierTag // app.cash.redwood.protocol/ModifierElement.tag.<get-tag>|<get-tag>(){}[0]
    final val value // app.cash.redwood.protocol/ModifierElement.value|{}value[0]
        final fun <get-value>(): kotlinx.serialization.json/JsonElement // app.cash.redwood.protocol/ModifierElement.value.<get-value>|<get-value>(){}[0]
}
final class app.cash.redwood.protocol/PropertyChange : app.cash.redwood.protocol/ValueChange { // app.cash.redwood.protocol/PropertyChange|null[0]
    constructor <init>(app.cash.redwood.protocol/Id, app.cash.redwood.protocol/PropertyTag, kotlinx.serialization.json/JsonElement = ...) // app.cash.redwood.protocol/PropertyChange.<init>|<init>(app.cash.redwood.protocol.Id;app.cash.redwood.protocol.PropertyTag;kotlinx.serialization.json.JsonElement){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/PropertyChange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/PropertyChange.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/PropertyChange.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/PropertyChange> { // app.cash.redwood.protocol/PropertyChange.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/PropertyChange.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/PropertyChange // app.cash.redwood.protocol/PropertyChange.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/PropertyChange) // app.cash.redwood.protocol/PropertyChange.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.PropertyChange){}[0]
        final val descriptor // app.cash.redwood.protocol/PropertyChange.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/PropertyChange.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/PropertyChange.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/PropertyChange> // app.cash.redwood.protocol/PropertyChange.Companion.serializer|serializer(){}[0]
    }
    final val id // app.cash.redwood.protocol/PropertyChange.id|{}id[0]
        final fun <get-id>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/PropertyChange.id.<get-id>|<get-id>(){}[0]
    final val tag // app.cash.redwood.protocol/PropertyChange.tag|{}tag[0]
        final fun <get-tag>(): app.cash.redwood.protocol/PropertyTag // app.cash.redwood.protocol/PropertyChange.tag.<get-tag>|<get-tag>(){}[0]
    final val value // app.cash.redwood.protocol/PropertyChange.value|{}value[0]
        final fun <get-value>(): kotlinx.serialization.json/JsonElement // app.cash.redwood.protocol/PropertyChange.value.<get-value>|<get-value>(){}[0]
}
final value class app.cash.redwood.protocol/ChildrenTag { // app.cash.redwood.protocol/ChildrenTag|null[0]
    constructor <init>(kotlin/Int) // app.cash.redwood.protocol/ChildrenTag.<init>|<init>(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/ChildrenTag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/ChildrenTag.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/ChildrenTag.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/ChildrenTag> { // app.cash.redwood.protocol/ChildrenTag.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/ChildrenTag.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/ChildrenTag // app.cash.redwood.protocol/ChildrenTag.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/ChildrenTag) // app.cash.redwood.protocol/ChildrenTag.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.ChildrenTag){}[0]
        final val descriptor // app.cash.redwood.protocol/ChildrenTag.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/ChildrenTag.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/ChildrenTag.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/ChildrenTag> // app.cash.redwood.protocol/ChildrenTag.Companion.serializer|serializer(){}[0]
        final val Root // app.cash.redwood.protocol/ChildrenTag.Companion.Root|{}Root[0]
            final fun <get-Root>(): app.cash.redwood.protocol/ChildrenTag // app.cash.redwood.protocol/ChildrenTag.Companion.Root.<get-Root>|<get-Root>(){}[0]
    }
    final val value // app.cash.redwood.protocol/ChildrenTag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // app.cash.redwood.protocol/ChildrenTag.value.<get-value>|<get-value>(){}[0]
}
final value class app.cash.redwood.protocol/EventTag { // app.cash.redwood.protocol/EventTag|null[0]
    constructor <init>(kotlin/Int) // app.cash.redwood.protocol/EventTag.<init>|<init>(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/EventTag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/EventTag.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/EventTag.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/EventTag> { // app.cash.redwood.protocol/EventTag.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/EventTag.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/EventTag // app.cash.redwood.protocol/EventTag.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/EventTag) // app.cash.redwood.protocol/EventTag.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.EventTag){}[0]
        final val descriptor // app.cash.redwood.protocol/EventTag.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/EventTag.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/EventTag.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/EventTag> // app.cash.redwood.protocol/EventTag.Companion.serializer|serializer(){}[0]
    }
    final val value // app.cash.redwood.protocol/EventTag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // app.cash.redwood.protocol/EventTag.value.<get-value>|<get-value>(){}[0]
}
final value class app.cash.redwood.protocol/Id { // app.cash.redwood.protocol/Id|null[0]
    constructor <init>(kotlin/Int) // app.cash.redwood.protocol/Id.<init>|<init>(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/Id.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/Id.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/Id.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/Id> { // app.cash.redwood.protocol/Id.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/Id.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/Id.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/Id) // app.cash.redwood.protocol/Id.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.Id){}[0]
        final val descriptor // app.cash.redwood.protocol/Id.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/Id.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/Id.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/Id> // app.cash.redwood.protocol/Id.Companion.serializer|serializer(){}[0]
        final val Root // app.cash.redwood.protocol/Id.Companion.Root|{}Root[0]
            final fun <get-Root>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/Id.Companion.Root.<get-Root>|<get-Root>(){}[0]
    }
    final val value // app.cash.redwood.protocol/Id.value|{}value[0]
        final fun <get-value>(): kotlin/Int // app.cash.redwood.protocol/Id.value.<get-value>|<get-value>(){}[0]
}
final value class app.cash.redwood.protocol/ModifierTag { // app.cash.redwood.protocol/ModifierTag|null[0]
    constructor <init>(kotlin/Int) // app.cash.redwood.protocol/ModifierTag.<init>|<init>(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/ModifierTag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/ModifierTag.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/ModifierTag.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/ModifierTag> { // app.cash.redwood.protocol/ModifierTag.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/ModifierTag.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/ModifierTag // app.cash.redwood.protocol/ModifierTag.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/ModifierTag) // app.cash.redwood.protocol/ModifierTag.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.ModifierTag){}[0]
        final val descriptor // app.cash.redwood.protocol/ModifierTag.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/ModifierTag.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/ModifierTag.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/ModifierTag> // app.cash.redwood.protocol/ModifierTag.Companion.serializer|serializer(){}[0]
    }
    final val value // app.cash.redwood.protocol/ModifierTag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // app.cash.redwood.protocol/ModifierTag.value.<get-value>|<get-value>(){}[0]
}
final value class app.cash.redwood.protocol/PropertyTag { // app.cash.redwood.protocol/PropertyTag|null[0]
    constructor <init>(kotlin/Int) // app.cash.redwood.protocol/PropertyTag.<init>|<init>(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/PropertyTag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/PropertyTag.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/PropertyTag.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/PropertyTag> { // app.cash.redwood.protocol/PropertyTag.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/PropertyTag.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/PropertyTag // app.cash.redwood.protocol/PropertyTag.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/PropertyTag) // app.cash.redwood.protocol/PropertyTag.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.PropertyTag){}[0]
        final val descriptor // app.cash.redwood.protocol/PropertyTag.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/PropertyTag.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/PropertyTag.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/PropertyTag> // app.cash.redwood.protocol/PropertyTag.Companion.serializer|serializer(){}[0]
    }
    final val value // app.cash.redwood.protocol/PropertyTag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // app.cash.redwood.protocol/PropertyTag.value.<get-value>|<get-value>(){}[0]
}
final value class app.cash.redwood.protocol/RedwoodVersion : kotlin/Comparable<app.cash.redwood.protocol/RedwoodVersion> { // app.cash.redwood.protocol/RedwoodVersion|null[0]
    constructor <init>(kotlin/String) // app.cash.redwood.protocol/RedwoodVersion.<init>|<init>(kotlin.String){}[0]
    final fun compareTo(app.cash.redwood.protocol/RedwoodVersion): kotlin/Int // app.cash.redwood.protocol/RedwoodVersion.compareTo|compareTo(app.cash.redwood.protocol.RedwoodVersion){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/RedwoodVersion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/RedwoodVersion.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/RedwoodVersion.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/RedwoodVersion> { // app.cash.redwood.protocol/RedwoodVersion.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/RedwoodVersion.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/RedwoodVersion // app.cash.redwood.protocol/RedwoodVersion.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/RedwoodVersion) // app.cash.redwood.protocol/RedwoodVersion.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.RedwoodVersion){}[0]
        final val descriptor // app.cash.redwood.protocol/RedwoodVersion.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/RedwoodVersion.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/RedwoodVersion.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/RedwoodVersion> // app.cash.redwood.protocol/RedwoodVersion.Companion.serializer|serializer(){}[0]
        final val Unknown // app.cash.redwood.protocol/RedwoodVersion.Companion.Unknown|{}Unknown[0]
            final fun <get-Unknown>(): app.cash.redwood.protocol/RedwoodVersion // app.cash.redwood.protocol/RedwoodVersion.Companion.Unknown.<get-Unknown>|<get-Unknown>(){}[0]
    }
    final val value // app.cash.redwood.protocol/RedwoodVersion.value|{}value[0]
        final fun <get-value>(): kotlin/String // app.cash.redwood.protocol/RedwoodVersion.value.<get-value>|<get-value>(){}[0]
}
final value class app.cash.redwood.protocol/SnapshotChangeList { // app.cash.redwood.protocol/SnapshotChangeList|null[0]
    constructor <init>(kotlin.collections/List<app.cash.redwood.protocol/Change>) // app.cash.redwood.protocol/SnapshotChangeList.<init>|<init>(kotlin.collections.List<app.cash.redwood.protocol.Change>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/SnapshotChangeList.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/SnapshotChangeList.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/SnapshotChangeList.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/SnapshotChangeList> { // app.cash.redwood.protocol/SnapshotChangeList.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/SnapshotChangeList.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/SnapshotChangeList // app.cash.redwood.protocol/SnapshotChangeList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/SnapshotChangeList) // app.cash.redwood.protocol/SnapshotChangeList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.SnapshotChangeList){}[0]
        final val descriptor // app.cash.redwood.protocol/SnapshotChangeList.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/SnapshotChangeList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/SnapshotChangeList.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/SnapshotChangeList> // app.cash.redwood.protocol/SnapshotChangeList.Companion.serializer|serializer(){}[0]
        final val $childSerializers // app.cash.redwood.protocol/SnapshotChangeList.Companion.$childSerializers|{}$childSerializers[0]
    }
    final val changes // app.cash.redwood.protocol/SnapshotChangeList.changes|{}changes[0]
        final fun <get-changes>(): kotlin.collections/List<app.cash.redwood.protocol/Change> // app.cash.redwood.protocol/SnapshotChangeList.changes.<get-changes>|<get-changes>(){}[0]
}
final value class app.cash.redwood.protocol/WidgetTag { // app.cash.redwood.protocol/WidgetTag|null[0]
    constructor <init>(kotlin/Int) // app.cash.redwood.protocol/WidgetTag.<init>|<init>(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/WidgetTag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/WidgetTag.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // app.cash.redwood.protocol/WidgetTag.toString|toString(){}[0]
    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/WidgetTag> { // app.cash.redwood.protocol/WidgetTag.$serializer|null[0]
        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/WidgetTag.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/WidgetTag // app.cash.redwood.protocol/WidgetTag.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/WidgetTag) // app.cash.redwood.protocol/WidgetTag.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.WidgetTag){}[0]
        final val descriptor // app.cash.redwood.protocol/WidgetTag.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/WidgetTag.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    final object Companion { // app.cash.redwood.protocol/WidgetTag.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/WidgetTag> // app.cash.redwood.protocol/WidgetTag.Companion.serializer|serializer(){}[0]
    }
    final val value // app.cash.redwood.protocol/WidgetTag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // app.cash.redwood.protocol/WidgetTag.value.<get-value>|<get-value>(){}[0]
}
sealed interface app.cash.redwood.protocol/Change { // app.cash.redwood.protocol/Change|null[0]
    abstract val id // app.cash.redwood.protocol/Change.id|{}id[0]
        abstract fun <get-id>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/Change.id.<get-id>|<get-id>(){}[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // app.cash.redwood.protocol/Change.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/Change> // app.cash.redwood.protocol/Change.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // app.cash.redwood.protocol/Change.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}
sealed interface app.cash.redwood.protocol/ChildrenChange : app.cash.redwood.protocol/Change { // app.cash.redwood.protocol/ChildrenChange|null[0]
    abstract val tag // app.cash.redwood.protocol/ChildrenChange.tag|{}tag[0]
        abstract fun <get-tag>(): app.cash.redwood.protocol/ChildrenTag // app.cash.redwood.protocol/ChildrenChange.tag.<get-tag>|<get-tag>(){}[0]
    final class Add : app.cash.redwood.protocol/ChildrenChange { // app.cash.redwood.protocol/ChildrenChange.Add|null[0]
        constructor <init>(app.cash.redwood.protocol/Id, app.cash.redwood.protocol/ChildrenTag, app.cash.redwood.protocol/Id, kotlin/Int) // app.cash.redwood.protocol/ChildrenChange.Add.<init>|<init>(app.cash.redwood.protocol.Id;app.cash.redwood.protocol.ChildrenTag;app.cash.redwood.protocol.Id;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/ChildrenChange.Add.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Add.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // app.cash.redwood.protocol/ChildrenChange.Add.toString|toString(){}[0]
        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/ChildrenChange.Add> { // app.cash.redwood.protocol/ChildrenChange.Add.$serializer|null[0]
            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/ChildrenChange.Add.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/ChildrenChange.Add // app.cash.redwood.protocol/ChildrenChange.Add.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/ChildrenChange.Add) // app.cash.redwood.protocol/ChildrenChange.Add.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.ChildrenChange.Add){}[0]
            final val descriptor // app.cash.redwood.protocol/ChildrenChange.Add.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/ChildrenChange.Add.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
        }
        final object Companion { // app.cash.redwood.protocol/ChildrenChange.Add.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/ChildrenChange.Add> // app.cash.redwood.protocol/ChildrenChange.Add.Companion.serializer|serializer(){}[0]
        }
        final val childId // app.cash.redwood.protocol/ChildrenChange.Add.childId|{}childId[0]
            final fun <get-childId>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/ChildrenChange.Add.childId.<get-childId>|<get-childId>(){}[0]
        final val id // app.cash.redwood.protocol/ChildrenChange.Add.id|{}id[0]
            final fun <get-id>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/ChildrenChange.Add.id.<get-id>|<get-id>(){}[0]
        final val index // app.cash.redwood.protocol/ChildrenChange.Add.index|{}index[0]
            final fun <get-index>(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Add.index.<get-index>|<get-index>(){}[0]
        final val tag // app.cash.redwood.protocol/ChildrenChange.Add.tag|{}tag[0]
            final fun <get-tag>(): app.cash.redwood.protocol/ChildrenTag // app.cash.redwood.protocol/ChildrenChange.Add.tag.<get-tag>|<get-tag>(){}[0]
    }
    final class Move : app.cash.redwood.protocol/ChildrenChange { // app.cash.redwood.protocol/ChildrenChange.Move|null[0]
        constructor <init>(app.cash.redwood.protocol/Id, app.cash.redwood.protocol/ChildrenTag, kotlin/Int, kotlin/Int, kotlin/Int) // app.cash.redwood.protocol/ChildrenChange.Move.<init>|<init>(app.cash.redwood.protocol.Id;app.cash.redwood.protocol.ChildrenTag;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/ChildrenChange.Move.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Move.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // app.cash.redwood.protocol/ChildrenChange.Move.toString|toString(){}[0]
        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/ChildrenChange.Move> { // app.cash.redwood.protocol/ChildrenChange.Move.$serializer|null[0]
            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/ChildrenChange.Move.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/ChildrenChange.Move // app.cash.redwood.protocol/ChildrenChange.Move.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/ChildrenChange.Move) // app.cash.redwood.protocol/ChildrenChange.Move.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.ChildrenChange.Move){}[0]
            final val descriptor // app.cash.redwood.protocol/ChildrenChange.Move.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/ChildrenChange.Move.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
        }
        final object Companion { // app.cash.redwood.protocol/ChildrenChange.Move.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/ChildrenChange.Move> // app.cash.redwood.protocol/ChildrenChange.Move.Companion.serializer|serializer(){}[0]
        }
        final val count // app.cash.redwood.protocol/ChildrenChange.Move.count|{}count[0]
            final fun <get-count>(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Move.count.<get-count>|<get-count>(){}[0]
        final val fromIndex // app.cash.redwood.protocol/ChildrenChange.Move.fromIndex|{}fromIndex[0]
            final fun <get-fromIndex>(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Move.fromIndex.<get-fromIndex>|<get-fromIndex>(){}[0]
        final val id // app.cash.redwood.protocol/ChildrenChange.Move.id|{}id[0]
            final fun <get-id>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/ChildrenChange.Move.id.<get-id>|<get-id>(){}[0]
        final val tag // app.cash.redwood.protocol/ChildrenChange.Move.tag|{}tag[0]
            final fun <get-tag>(): app.cash.redwood.protocol/ChildrenTag // app.cash.redwood.protocol/ChildrenChange.Move.tag.<get-tag>|<get-tag>(){}[0]
        final val toIndex // app.cash.redwood.protocol/ChildrenChange.Move.toIndex|{}toIndex[0]
            final fun <get-toIndex>(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Move.toIndex.<get-toIndex>|<get-toIndex>(){}[0]
    }
    final class Remove : app.cash.redwood.protocol/ChildrenChange { // app.cash.redwood.protocol/ChildrenChange.Remove|null[0]
        constructor <init>(app.cash.redwood.protocol/Id, app.cash.redwood.protocol/ChildrenTag, kotlin/Int, kotlin/Int, kotlin.collections/List<app.cash.redwood.protocol/Id> = ...) // app.cash.redwood.protocol/ChildrenChange.Remove.<init>|<init>(app.cash.redwood.protocol.Id;app.cash.redwood.protocol.ChildrenTag;kotlin.Int;kotlin.Int;kotlin.collections.List<app.cash.redwood.protocol.Id>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // app.cash.redwood.protocol/ChildrenChange.Remove.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Remove.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // app.cash.redwood.protocol/ChildrenChange.Remove.toString|toString(){}[0]
        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<app.cash.redwood.protocol/ChildrenChange.Remove> { // app.cash.redwood.protocol/ChildrenChange.Remove.$serializer|null[0]
            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // app.cash.redwood.protocol/ChildrenChange.Remove.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): app.cash.redwood.protocol/ChildrenChange.Remove // app.cash.redwood.protocol/ChildrenChange.Remove.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, app.cash.redwood.protocol/ChildrenChange.Remove) // app.cash.redwood.protocol/ChildrenChange.Remove.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;app.cash.redwood.protocol.ChildrenChange.Remove){}[0]
            final val descriptor // app.cash.redwood.protocol/ChildrenChange.Remove.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // app.cash.redwood.protocol/ChildrenChange.Remove.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
        }
        final object Companion { // app.cash.redwood.protocol/ChildrenChange.Remove.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/ChildrenChange.Remove> // app.cash.redwood.protocol/ChildrenChange.Remove.Companion.serializer|serializer(){}[0]
            final val $childSerializers // app.cash.redwood.protocol/ChildrenChange.Remove.Companion.$childSerializers|{}$childSerializers[0]
        }
        final val count // app.cash.redwood.protocol/ChildrenChange.Remove.count|{}count[0]
            final fun <get-count>(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Remove.count.<get-count>|<get-count>(){}[0]
        final val id // app.cash.redwood.protocol/ChildrenChange.Remove.id|{}id[0]
            final fun <get-id>(): app.cash.redwood.protocol/Id // app.cash.redwood.protocol/ChildrenChange.Remove.id.<get-id>|<get-id>(){}[0]
        final val index // app.cash.redwood.protocol/ChildrenChange.Remove.index|{}index[0]
            final fun <get-index>(): kotlin/Int // app.cash.redwood.protocol/ChildrenChange.Remove.index.<get-index>|<get-index>(){}[0]
        final val removedIds // app.cash.redwood.protocol/ChildrenChange.Remove.removedIds|{}removedIds[0]
            final fun <get-removedIds>(): kotlin.collections/List<app.cash.redwood.protocol/Id> // app.cash.redwood.protocol/ChildrenChange.Remove.removedIds.<get-removedIds>|<get-removedIds>(){}[0]
        final val tag // app.cash.redwood.protocol/ChildrenChange.Remove.tag|{}tag[0]
            final fun <get-tag>(): app.cash.redwood.protocol/ChildrenTag // app.cash.redwood.protocol/ChildrenChange.Remove.tag.<get-tag>|<get-tag>(){}[0]
    }
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // app.cash.redwood.protocol/ChildrenChange.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<app.cash.redwood.protocol/ChildrenChange> // app.cash.redwood.protocol/ChildrenChange.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // app.cash.redwood.protocol/ChildrenChange.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}
sealed interface app.cash.redwood.protocol/ValueChange : app.cash.redwood.protocol/Change // app.cash.redwood.protocol/ValueChange|null[0]
