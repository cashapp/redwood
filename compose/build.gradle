import org.jetbrains.kotlin.gradle.plugin.KotlinPluginKt

apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.

archivesBaseName = 'treehouse-jetpack-compose'

kotlin {
  android {
    publishAllLibraryVariants()
  }
  jvm()

  sourceSets {
    commonMain {
      kotlin {
        srcDir 'upstream/compose/runtime/runtime/src/commonMain/kotlin'
      }
      dependencies {
        api deps.kotlinx.coroutines.core
        // Keep in sync with upstream/compose/runtime/runtime/build.gradle
        api 'org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.3'
      }
    }
    // TODO get tests working
    // commonTest {
    //   kotlin {
    //     srcDir 'upstream/compose/runtime/runtime/src/test/kotlin'
    //   }
    //   dependencies {
    //     implementation 'org.jetbrains.kotlin:kotlin-test-multiplatform'
    //   }
    // }
    androidMain {
      kotlin {
        srcDir 'upstream/compose/runtime/runtime/src/jvmMain/kotlin'
      }
      dependencies {
        // Keep in sync with upstream/compose/runtime/runtime/build.gradle
        api 'androidx.annotation:annotation:1.1.0'
      }
    }
    jvmMain {
      kotlin {
        srcDir 'upstream/compose/runtime/runtime/src/jvmMain/kotlin'
      }
    }
  }
}

android {
  sourceSets {
    main {
      manifest.srcFile 'upstream/compose/runtime/runtime/src/androidMain/AndroidManifest.xml'
    }
  }
}

dependencies {
  add(KotlinPluginKt.PLUGIN_CLASSPATH_CONFIGURATION_NAME, deps.composeCompiler)
}

if (!file('upstream/.git').exists()) {
  throw new RuntimeException(
    "Missing 'upstream' git submodule clone. Did you run 'git submodule update --init'?")
}

def upstreamLibraryVersions = file('upstream/buildSrc/src/main/kotlin/androidx/build/LibraryVersions.kt').text
if (!upstreamLibraryVersions.contains("val COMPOSE = Version(System.getenv(\"COMPOSE_CUSTOM_VERSION\") ?: \"${versions.compose}\")")) {
  throw new RuntimeException(
    "Upstream git repository Compose version does not match project dependency version ${versions.compose}")
}

def upstreamDependencyVersions = file('upstream/buildSrc/build_dependencies.gradle').text
if (!upstreamDependencyVersions.contains("build_versions.kotlin = \"${versions.kotlin}\"")) {
  throw new RuntimeException(
    "Upstream git repository Kotlin version does not match project dependency version ${versions.kotlin}")
}
if (!upstreamDependencyVersions.contains("build_versions.kotlin_coroutines = \"${versions.kotlinx.coroutines}\"")) {
  throw new RuntimeException(
    "Upstream git repository Kotlin coroutines version does not match project dependency version ${versions.kotlinx.coroutines}")
}
