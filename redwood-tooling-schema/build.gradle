import static app.cash.redwood.buildsupport.TargetGroup.Tooling
import static org.gradle.api.plugins.JavaPlugin.TEST_TASK_NAME
import static org.jetbrains.kotlin.gradle.plugin.KotlinCompilation.TEST_COMPILATION_NAME

redwoodBuild {
  targets(Tooling)
  publishing()
  cliApplication('redwood-schema', 'app.cash.redwood.tooling.schema.Main')
}

apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

dependencies {
  api projects.redwoodSchema
  api libs.kotlin.reflect
  implementation libs.kotlinx.serialization.json
  implementation libs.xmlutil.serialization
  implementation libs.kotlin.compilerEmbeddable
  implementation libs.clikt

  testImplementation projects.testApp.schema
  testImplementation libs.junit
  testImplementation libs.assertk
  testImplementation libs.testParameterInjector
  testImplementation libs.jimfs
}

// In order to simplify writing test schemas, inject the test sources and
// test classpath as properties into the test runtime. This allows testing
// the FIR-based parser on sources written inside the test case. Cool!
tasks.named(TEST_TASK_NAME, Test).configure {
  def compilation = kotlin.target.compilations.getByName(TEST_COMPILATION_NAME)

  def sources = compilation.defaultSourceSet.kotlin.sourceDirectories.files
  it.systemProperty('redwood.internal.sources', sources.join(File.pathSeparator))

  def classpath = project.configurations.getByName(compilation.compileDependencyConfigurationName).files
  it.systemProperty('redwood.internal.classpath', classpath.join(File.pathSeparator))

  // FIR is heap hungry.
  it.maxHeapSize = "2g"
}
